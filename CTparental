#!/bin/bash
# CTparental
#
# par Guillaume MARSAT
# Corrections orthographiques par Pierre-Edouard TESSIER
# une partie du code est tirée du script alcasar-bl.sh créé par Franck BOUIJOUX et Richard REY
# présente dans le code du projet alcasar en version 2.6.1 ; web page http://www.alcasar.net/

# This script is distributed under the Gnu General Public License (GPL)
DIR_CONF="/etc/CTparental"
DIR_SHARE="/usr/share/CTparental"
FILE_CONF="$DIR_CONF/CTparental.conf"
if [ -f "$DIR_CONF/CTparental.conf" ];then
    if [ $( grep -c "^LANG=" $FILE_CONF ) -ge 1 ] ;then
		export LANG=$( grep "^LANG" $FILE_CONF | cut -d "=" -f2 )
    fi
fi
DIRLOCALE=${DIRLOCALE:="/usr/share/locale"}
#chargement des locales.
set -a
source /usr/bin/gettext.sh
set +a
export TEXTDOMAINDIR="$DIRLOCALE"
export TEXTDOMAIN="ctparental"
CHEMINCTPARENTLE="$(readlink -f "$0")"


## imports du plugin de la distribution si il existe
if [ -f "${DIR_CONF}/dist.conf" ];then . "${DIR_CONF}/dist.conf"; fi

#### UID MINIMUM pour les UTILISATEURS
UIDMINUSER=${UIDMINUSER:=500}

# considère comme root tous les utilisateurs avec un uid inférieur ou
# égal à 499,ce qui permet à apt-get,urpmi,yum... de lancer le script
# sans erreur.
if [ ! $UID -lt $UIDMINUSER ]; then
    gettext 'Root rights needed to run this script.'
    echo ""
    exit 1
fi
## On ne fait rien si ctparental est déja en cours de traitement long.
PIDFILE="/var/run/CTparental.pid"
PIDFILEWAIT="/var/run/CTparentalwait.pid"
if [ -f $PIDFILE ];then
	pidtest=$(cat $PIDFILE)
	if [ $( ps -A | grep -c "$pidtest") -eq 0 ] ; then
		rm -f $PIDFILE
	else
		## si déja 2 processus sont lancer on ferme le nouveaux.
		if [ -f $PIDFILEWAIT ] ; then
			gettext 'Too many processes already in progress, please try again later.'
			echo ""
			exit 2
		fi
		echo $$ > $PIDFILEWAIT
		## on attend que le processus déja en cour ce termine max 55 secondes
		eval_gettext 'Waiting for the end of the process $pidtest'
		for ((count=0 ; 55 - count ; count++))
		do
			sleep 1
			echo -n "."
			if [ $( ps -A | grep -c "$pidtest") -eq 0 ] ; then
				rm -f $PIDFILE
				break
			fi
		done
		echo ""
		## si le processus et encore en cour au bout de 55 seconde on abendonne l'éxecution d'un nouveaux processus
		if [ $( ps -A | grep -c "$pidtest") -ge 1 ] ; then
			gettext 'The wait is too long please try again later.'
			echo ""
			rm -f $PIDFILEWAIT
			exit 2
		fi
		rm -f $PIDFILEWAIT
    fi
fi
echo $$ > $PIDFILE

noinstalldep="0"
nomanuel="0"
x=($*)
narg=0
for arg in $* ; do
    narg=$(( $narg + 1 ))
    case $arg in
	-nodep )
	   noinstalldep=1
	   ;;
	-nomanuel )
	   nomanuel=1
	   ;;
	-dirhtml )
	   DIRhtmlPersonaliser=${x[$narg]}
	   if [ ! -d "$DIRhtmlPersonaliser" ];then
		gettext 'Invalid directory path!'
		exit 0
	   fi
	   ;;
	-exp )
	   DIRexpconf=${x[$narg]}
	   if [ ! -d "$DIRexpconf" ];then
		gettext 'Invalid directory path!'
		exit 0
	   fi
	   ;;
	-imp )
	   FILEimpconf=${x[$narg]}
	   if [ ! -e "$FILEimpconf" ];then
		gettext 'Error opening the file'
		exit 0
	   fi
	   ;;
    esac
done

# fonction pause pour debugage
pause() {
    MESSAGE="$*"
    choi=""
    MESSAGE=${MESSAGE:=$(gettext "to continue press a button:")}
    echo  "$MESSAGE"
    while true; do
        read choi
        case $choi in
            * )
		break
		;;
	esac
    done
}

SED="/bin/sed -i"
SAFE_CONF="$DIR_CONF/CTsafe.conf"
FILE_GCTOFFCONF="$DIR_CONF/GCToff.conf"
FILE_HCOMPT="$DIR_CONF/CThourscompteur"
FILE_HCONF="$DIR_CONF/CThours.conf"
if [ ! -f $FILE_CONF ] ; then
    mkdir -p $DIR_CONF
    mkdir -p "$DIR_SHARE"/
    cat << EOF > $FILE_CONF
LASTUPDATE=0
#LANG=$LANG
DNSMASQ=BLACK
AUTOUPDATE=OFF
HOURSCONNECT=OFF
GCTOFF=OFF
PRIVOXYDF=ON
REDIRECT=ON
# Pare-feu minimal.
IPRULES=OFF
MD5DREAB=
I_WAN_IPV4=
I_WAN_IPV6=
IP_BOX_IPV4=
IP_BOX_IPV6=
IP_IWAN_IPV4=
IP_IWAN_IPV6=
DNS1v4=
DNS2v4=
DNS1v6=
DNS2v6=
EOF

fi

if [ ! -f $SAFE_CONF ] ; then
    cat << EOF > $SAFE_CONF
SAFEGOOGLE
SAFEYOUTUBE
SAFEBING
SAFEDUCK
SAFEQWANT
EOF

fi

FILTRAGEISOFF="$( grep -c "DNSMASQ=OFF" $FILE_CONF )"
REDIRECT="$( grep -c "REDIRECT=ON" $FILE_CONF )"

tempDIR="/tmp/alcasar"
tempDIRRamfs="/tmp/alcasarRamfs"
if [ ! -d $tempDIRRamfs ]; then mkdir "${tempDIRRamfs}"; fi
RougeD="\033[1;31m"
BleuD="\033[1;36m"
#VertD="\033[1;32m"
Fcolor="\033[0m"
COMMONFILEGS=${COMMONFILEGS:="common-auth"}
GESTIONNAIREDESESSIONS=${GESTIONNAIREDESESSIONS:=" login gdm lightdm slim kdm xdm lxdm gdm3 "}
FILEPAMTIMECONF="/etc/security/time.conf"
DIRPAM="/etc/pam.d/"
DAYS=${DAYS:="$(gettext "Monday") $(gettext "Tuesday") $(gettext "Wednesday") $(gettext "Thursday") $(gettext "Friday") $(gettext "Saturday") $(gettext "Sunday") "}
DAYS=( $DAYS )
DAYSPAM=( Mo Tu We Th Fr Sa Su )
DAYSCRON=( mon tue wed thu fri sat sun )
PROXYport=${PROXYport:="8888"}
E2GUport=${E2GUport:="8080"}
PROXYuser=${PROXYuser:="privoxy"}

#### DEPENDANCES par DEFAUT #####
DEPENDANCES=${DEPENDANCES:=" console-data e2guardian dnsmasq lighttpd lighttpd-mod-magnet php-cgi libnotify-bin notification-daemon iptables-persistent rsyslog privoxy openssl libnss3-tools whiptail dnsutils rsyslog "}

#### PAQUETS EN CONFLIT par DEFAUT #####
CONFLICTS=${CONFLICTS:=" dansguardian mini-httpd apache2 firewalld "}

#### COMMANDES de services par DEFAUT #####
CMDSERVICE=${CMDSERVICE:="service "}
CRONstart=${CRONstart:="$CMDSERVICE cron start "}
CRONstop=${CRONstop:="$CMDSERVICE cron stop "}
CRONrestart=${CRONrestart:="$CMDSERVICE cron restart "}
LIGHTTPDstart=${LIGHTTPDstart:="$CMDSERVICE lighttpd start "}
LIGHTTPDstop=${LIGHTTPDstop:="$CMDSERVICE lighttpd stop "}
LIGHTTPDrestart=${LIGHTTPDrestart:="$CMDSERVICE lighttpd restart "}
DNSMASQstart=${DNSMASQstart:="$CMDSERVICE dnsmasq start "}
DNSMASQstop=${DNSMASQstop:="$CMDSERVICE dnsmasq stop "}
DNSMASQrestart=${DNSMASQrestart:="$CMDSERVICE dnsmasq restart "}
NWMANAGERstop=${NWMANAGERstop:="$CMDSERVICE network-manager stop"}
NWMANAGERstart=${NWMANAGERstart:="$CMDSERVICE network-manager start"}
NWMANAGERrestart=${NWMANAGERrestart:="$CMDSERVICE network-manager restart"}
NETWORKINGrestart=${NETWORKINGrestart:="$CMDSERVICE networking restart"}
IPTABLESsave=${IPTABLESsave:="$CMDSERVICE netfilter-persistent save"}
IPTABLESsaveFILE=${IPTABLESsaveFILE:=""}
E2GUARDIANrestart=${E2GUARDIANrestart:="$CMDSERVICE e2guardian restart"}
PRIVOXYrestart=${PRIVOXYrestart:="$CMDSERVICE privoxy restart"}
RSYSLOGRESTART=${RSYSLOGRESTART:="$CMDSERVICE rsyslog restart"}
PING4=${PING4:="ping -4 "}
PING6=${PING6:="ping -6 "}

#### LOCALISATION du fichier PID lighttpd par defaut ####
LIGHTTPpidfile=${LIGHTTPpidfile:="/var/run/lighttpd.pid"}

#### LOCALISATION du fichier de chargement de modules ####
FILEMODULESLOAD=${MODULESLOAD:="/etc/modules-load.d/modules.conf"}

RSYSLOGCTPARENTAL=${RSYSLOGCTPARENTAL:="/etc/rsyslog.d/10-iptables.conf"}

#### COMMANDES D'ACTIVATION DES SERVICES AU DEMARRAGE DU PC ####
ENCRON=${ENCRON:=""}
ENLIGHTTPD=${ENLIGHTTPD:=""}
ENDNSMASQ=${ENDNSMASQ:=""}
ENNWMANAGER=${ENNWMANAGER:=""}
ENIPTABLESSAVE=${ENIPTABLESSAVE:=""}
ENE2GUARDIAN=${ENE2GUARDIAN:=""}
ENPRIVOXY=${ENPRIVOXY:=""}
ENNETWORK=${ENNETWORK:=""}

FILESYSCTL=${FILESYSCTL:="/etc/sysctl.conf"}
DIRE2G=${DIRE2G:="/etc/e2guardian/"}
DIRE2GLANG=${DIRE2GLANG:="/usr/share/e2guardian/languages/"}
NEWTEMPLETE2G=${NEWTEMPLETE2G:="$DIR_SHARE"/confe2guardian}
FILEConfe2gu=${FILEConfe2gu:=$DIRE2G"e2guardian.conf"}
FILEConfe2guf1=${FILEConfe2guf1:=$DIRE2G"e2guardianf1.conf"}
DREAB="$DIR_CONF/domaine-rehabiliter.conf"
E2GUXSITELIST=$DIRE2G"lists/exceptionsitelist"
DNSMASQCONF=${DNSMASQCONF:="/etc/dnsmasq.conf"}
MAINCONFHTTPD=${MAINCONFHTTPD:="/etc/lighttpd/lighttpd.conf"}
DIRCONFENABLEDHTTPD=${DIRCONFENABLEDHTTPD:="/etc/lighttpd/conf-enabled"}
CTPARENTALCONFHTTPD=${CTPARENTALCONFHTTPD:="$DIRCONFENABLEDHTTPD/10-CTparental.conf"}
DIRHTML=${DIRHTML:="/var/www/CTparental"}
DIRadminHTML=${DIRadminHTML:="/var/www/CTadmin"}
PASSWORDFILEHTTPD=${PASSWORDFILEHTTPD:="/etc/lighttpd/lighttpd-htdigest.user"}
REALMADMINHTTPD=${REALMADMINHTTPD:="interface admin"}
CADIR=${CADIR:="/usr/local/share/ca-certificates/ctparental"}
UPDATECASYSTEM=${UPDATECASYSTEM:="update-ca-certificates"}
PEMSRVDIR=${PEMSRVDIR:="/etc/ssl/private"}
CMDINSTALL=""
IPTABLES=${IPTABLES:="/sbin/iptables"}
IPTABLES6=${IPTABLES6:="/sbin/ip6tables"}
ADDUSERTOGROUP=${ADDUSERTOGROUP:="gpasswd -a "}
DELUSERTOGROUP=${DELUSERTOGROUP:="gpasswd -d "}
ETCPRIVOXY=${ETCPRIVOXY:="/etc/privoxy"}
PRIVOXYCONF=${PRIVOXYCONF:="$ETCPRIVOXY/config"}
PRIVOXYUSERA=${PRIVOXYUSERA:="$ETCPRIVOXY/user.action"}
PRIVOXYCTA=${PRIVOXYCTA:="$ETCPRIVOXY/ctparental.action"}
XSESSIONFILE=${XSESSIONFILE:="/etc/X11/Xsession"}
REPCAMOZ=${REPCAMOZ:="/usr/share/ca-certificates/mozilla/"}
DOMAINEDEPOTS=${DOMAINEDEPOTS:=$(cat /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null | grep "^deb" | cut -d"/" -f3 | sort -u | sed -e "s/^www././g" )}
TIMERALERT=${TIMERALERT:=10}
NEWPASSGRUB2=${NEWPASSGRUB2:="grub-mkpasswd-pbkdf2"}
BOOTREPGRUB2=${BOOTREPGRUB2:="/boot/grub"}
BL_SERVER="dsi.ut-capitole.fr"
FILEIPBLACKLIST="$DIR_CONF/ip-blackliste"
FILEIPTABLES="$DIR_CONF/iptables"
FILEIPTIMEWEB="$DIR_CONF/iptables-timerweb"
CATEGORIES_ENABLED="$DIR_CONF/categories-enabled.conf"
BL_CATEGORIES_AVAILABLE="$DIR_CONF/bl-categories-available"
WL_CATEGORIES_AVAILABLE="$DIR_CONF/wl-categories-available"
DIR_DNS_FILTER_AVAILABLE="$DIR_CONF/dnsfilter-available"
DIR_DNS_BLACKLIST_ENABLED="$DIR_CONF/blacklist-enabled"
DIR_DNS_WHITELIST_ENABLED="$DIR_CONF/whitelist-enabled"
DNS_FILTER_OSSI="$DIR_CONF/blacklist-local.conf"
THISDAYS=$(( $(date +%Y) * 365 + $(date +%j | sed -e "s/^0*//g") ))
MAXDAYSFORUPDATE="7" # update tous les 7 jours
USERHTTPD=$( grep /var/www /etc/passwd  | cut -d":" -f1)
GROUPHTTPD=$( grep "$USERHTTPD" /etc/group | cut -d":" -f1)


if [ "$(yum help 2> /dev/null | wc -l )" -ge 50 ] ; then
    ## "Distribution basée sur yum exemple redhat, fedora..."
    CMDINSTALL=${CMDINSTALL:="yum install "}
    CMDREMOVE=${CMDREMOVE:="rpm -e "}
fi
urpmi --help 2&> /dev/null
if [ $? -eq 1 ] ; then
    ## "Distribution basée sur urpmi exemple mandriva..."
    CMDINSTALL=${CMDINSTALL:="urpmi -a --auto "}
    CMDREMOVE=${CMDREMOVE:="rpm -e "}
fi
apt-get -h 2&> /dev/null
if [ $? -eq 0 ] ; then
    ## "Distribution basée sur apt-get exemple debian, ubuntu ..."
    CMDINSTALL=${CMDINSTALL:="apt-get -y --force-yes install "}
    CMDREMOVE=${CMDREMOVE:="dpkg --purge  "}
fi

if [ -z "$CMDINSTALL" ] ; then
    gettext 'No known package manager was detected.'
    set -e
    exit 1
fi

i_WAN_ipv4="$(ip -4 route | grep default | awk '{print $5}')" # GW!
if [ "$i_WAN_ipv4" =  "" ];then
    ipbox_ipv4=""
    ip_i_WAN_ipv4=""
    ip_broadcast_ipv4=""
    reseau_box_ipv4=""
else
    ipbox_ipv4="$(ip -4 route | grep default | awk '{print $3}')"
    ip_i_WAN_ipv4="$(ip -4 address show "$i_WAN_ipv4" | awk '/inet /{print substr($2,1)}')"
    ip_broadcast_ipv4="$(ip -4 address show "$i_WAN_ipv4" | awk '/brd /{print substr($4,1)}')"
    reseau_box_ipv4="$(ip -4 route | grep "$i_WAN_ipv4" | grep -v default | grep "src" | awk '//{print substr($1,1)}' )"
fi
export i_WAN_ipv4
export ipbox_ipv4
export ip_i_WAN_ipv4
export reseau_box_ipv4
export ip_broadcast_ipv4

DNS1v4="$(dig -4 +all +retry=1 +tries=1 | grep SERVER | cut -d "(" -f2 | sed -e "s/)//g")"
if [ ! "$DNS1v4" =  "" ];then
    iptables -A OUTPUT -d "$DNS1v4" -p udp --dport 53 -j REJECT
    DNS2v4="$(dig -4 +all +retry=1 +tries=1 | grep SERVER | cut -d "(" -f2 | sed -e "s/)//g")"
    iptables -D OUTPUT -d "$DNS1v4" -p udp --dport 53 -j REJECT
fi

#echo "intefaceWAN="$i_WAN_ipv4" ipbox_ipv4="$ipbox_ipv4" ipinterfaceWan="$ip_i_WAN_ipv4" reseau_box_ipv4="$reseau_box_ipv4" broadcast="$ip_broadcast_ipv4" dns1="$DNS1" dns2="$DNS2
# on utilise les DNS google en cas de problême de détection de ceux du fai
export DNS1v4=${DNS1v4:=8.8.8.8}
export DNS2v4=${DNS2v4:=8.8.4.4}


i_WAN_ipv6="$(ip -6 route | grep default | awk '{print $5}')" # GW!
if [ "$i_WAN_ipv6" =  "" ];then
    ipbox_ipv6=""
    ip_i_WAN_ipv6=""
    reseau_box_ipv6_g=""
else
    ipbox_ipv6="$(ip -6 route | grep default | awk '{print $3}')"
    ip_i_WAN_ipv6="$(ip -6 address show "$i_WAN_ipv6" | awk '/inet/{print substr($2,1)}')"
    reseau_box_ipv6_g="$(ip -6 route | grep "$i_WAN_ipv6" | grep -v default | awk '//{print substr($1,1)}')"
fi

reseau_box_ipv6_l="fe80::/64"

export i_WAN_ipv6
export ipbox_ipv6
export ip_i_WAN_ipv6
export reseau_box_ipv6_g
export reseau_box_ipv6_l
# on utilise les DNS google en cas de problême de détection de ceux du fai
export DNS1v6=${DNS1v6:=2001:4860:4860::8888}
export DNS2v6=${DNS2v6:=2001:4860:4860::8844}

ipV4ok() {
	ip=$(echo "$1" | cut -d"/" -f1)
	mask=$(echo "$1" | grep "/" | cut -d"/" -f2)
	if [ "$(echo "$1" | grep -c "^\(\(2[0-5][0-5]\|2[0-4][0-9]\|1[0-9][0-9]\|[0-9]\{1,2\}\)\.\)\{3\}\(2[0-5][0-5]\|2[0-4][0-9]\|1[0-9][0-9]\|[0-9]\{1,2\}\)$")" -eq 1 ];then
		echo 1
		return 1
	fi
	if [ ! "$(echo "$ip" | grep -c "^\(\(2[0-5][0-5]\|2[0-4][0-9]\|1[0-9][0-9]\|[0-9]\{1,2\}\)\.\)\{3\}\(2[0-5][0-5]\|2[0-4][0-9]\|1[0-9][0-9]\|[0-9]\{1,2\}\)$")" -eq 1 ];then
		echo 0
		return 0
	fi
	if [ "$(echo "$mask" | grep -c "^\([1-9]\|[1-2][0-9]\|3[0-2]\)$")" -eq 1 ];then
		echo 1
		return 1
	fi
	i=1
	octn=255
	result=1
while [ $i -le 4 ]
do
	oct=$( echo "$mask" | grep '\.'| cut -d "." -f$i )
	if [ -z "$oct" ] ; then
		result=0
		break
	fi
	if [ ! "$octn" -eq 255 ];then
		if [ ! "$oct" -eq 0 ];then
			result=0
			break
		fi
	fi
	octn=$oct
	if [ ! "$oct" -eq 255 ] &&  [ ! "$oct" -eq 254 ]  &&  [ ! "$oct" -eq 252 ] &&  [ ! "$oct" -eq 248 ] &&  [ ! "$oct" -eq 240 ] &&  [ ! "$oct" -eq 224 ] &&  [ ! "$oct" -eq 192 ] &&  [ ! "$oct" -eq 128 ] &&  [ ! "$oct" -eq 0 ]; then
		result=0
		break
	  fi
	i=$(( i + 1 ))
done
	echo $result
	return $result
}

ipV6ok (){
ip=$(echo "$1" | cut -d"/" -f1)
mask=$(echo "$1" | grep "/" | cut -d"/" -f2) # de 1 a 128
if [ $(echo $ip | grep -Ec "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b))|(([0-9A-Fa-f]{1,4}:){0,5}:((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b))|(::([0-9A-Fa-f]{1,4}:){0,5}((b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b).){3}(b((25[0-5])|(1d{2})|(2[0-4]d)|(d{1,2}))b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$" ) -eq 0 ] ;then
echo 0
return 0
fi
if [ "$(echo "$mask" | grep -c "^\([1-9]\|[1-9][0-9]\|[1][0-1][0-9]\|[1][2][0-8]\)$")" -eq 1 ];then
	echo 1
	return 1
fi
if [ -z $mask ];then
	echo 1
	return 1
fi
echo 0
return 0
}

networkisoknext() {
    ipv4ok=0
    $PING4 -c1 -w1 "$ipbox_ipv4" 2>/dev/null 1>/dev/null
    if [ $? -eq  0 ];then
	ipv4ok=1
    fi

    ipv6ok=0
    $PING6 -c1 -w1 "$ipbox_ipv6" 2>/dev/null 1>/dev/null
    if [ $? -eq  0 ];then
	ipv6ok=1
    fi

    if [ $ipv4ok -eq 0 ];then
	if [ $ipv6ok -eq 0 ];then
	   gettext 'error recovering network settings'
	   echo
	   exit 0
	fi
    fi
}

resolvconffixon() {
    echo "<resolvconffixon>"
    # redémarre dnsmasq
    $DNSMASQstop

    resolvconf -u 2&> /dev/null
    if [ $? -eq 1 ];then # si resolvconf est bien installé
	resolvconf -u
	# on s'assure que les dns du FAI soient bien ajoutés au
	# fichier /etc/resolv.conf malgré l'utilisation de dnsmasq.
	grep ^nameserver /etc/resolv.conf | grep -v 127.0.0.1 | sort -u > /etc/resolvconf/resolv.conf.d/tail
    fi
    $DNSMASQstart
    sleep 1

    echo "</resolvconffixon>"
}

resolvconffixoff() {
    echo "<resolvconffixoff>"
    $DNSMASQstop
    resolvconf -u 2&> /dev/null
    if [ $? -eq 1 ];then # si resolvconf est bien installé
	echo > /etc/resolvconf/resolv.conf.d/tail
	resolvconf -u
    fi
    echo "</resolvconffixoff>"
}


PRIVATE_IP4="127.0.0.10"
PRIVATE_IP6="fc00::127:10"
ADMIN_IP4="127.0.0.11"
ADMIN_IP6="fc00::127:11"


FILE_tmp=${FILE_tmp:="$tempDIRRamfs/filetmp.txt"}
FILE_tmpSizeMax=${FILE_tmpSizeMax:="256M"}  # 70 Min, Recommend 128M
LOWRAM=${LOWRAM:=0}
if [ "$LOWRAM" -eq 0 ] ; then
    MFILEtmp="mount -t tmpfs -o size=$FILE_tmpSizeMax tmpfs $tempDIRRamfs"
    UMFILEtmp="umount $tempDIRRamfs"
else
    MFILEtmp=""
    UMFILEtmp=""
fi


initblenabled() {
    USERHTTPD=$( grep /var/www /etc/passwd | cut -d":" -f1)
    GROUPHTTPD=$( grep "$USERHTTPD" /etc/group | cut -d":" -f1)
    cat << EOF > $CATEGORIES_ENABLED
adult
agressif
ctparental
dangerous_material
dating
drogue
gambling
hacking
malware
marketingware
mixed_adult
phishing
redirector
publicite
ddos
sect
strict_redirector
strong_redirector
tricheur
warez
ossi
EOF

    chown root:"$GROUPHTTPD" "$CATEGORIES_ENABLED"
    chmod 664 "$CATEGORIES_ENABLED"
}

confe2guardian() {
    # replace the default deny HTML page
    echo "<confe2guardian>"
    $SED "s?^loglevel =.*?loglevel = 0?g" "$FILEConfe2gu"
    $SED "s?^languagedir =.*?languagedir = $DIRE2GLANG?g" "$FILEConfe2gu"
    $SED "s?^language =.*?language = 'french'?g" "$FILEConfe2gu"
    $SED "s?^logexceptionhits =.*?logexceptionhits = 0?g" "$FILEConfe2gu"
    $SED "s?^filterip =.*?filterip = 127.0.0.1?g" "$FILEConfe2gu"
    $SED "s?^proxyip =.*?proxyip = 127.0.0.1?g" "$FILEConfe2gu"
    $SED "s?^filterports =.*?filterports = $E2GUport?g" "$FILEConfe2gu"
    $SED "s?^proxyport =.*?proxyport = $PROXYport?g" "$FILEConfe2gu"
    $SED "s?.*UNCONFIGURED.*?#UNCONFIGURED?g" "$FILEConfe2gu"
    cat << EOF > "$DIRE2G"lists/bannedsitelist
#Blanket Block.  To block all sites except those in the
#exceptionsitelist and greysitelist files, remove
#the # from the next line to leave only a '**':
#**

#Blanket SSL/CONNECT Block.  To block all SSL
#and CONNECT tunnels except to addresses in the
#exceptionsitelist and greysitelist files, remove
#the # from the next line to leave only a '**s':
#**s

#Blanket IP Block.  To block all sites specified only as an IP,
#remove the # from the next line to leave only a '*ip':
#*ip

#Blanket SSL/CONNECT IP Block.  To block all SSL and CONNECT
#tunnels to sites specified only as an IP,
#remove the # from the next line to leave only a '**ips':
#**ips

$(gettext "#the domain filtering is handled by dnsmasq, do not touch this file!")

EOF

    $E2GUARDIANrestart
    cp -f "$NEWTEMPLETE2G"/template.html "$DIRE2GLANG"ukenglish/
    cp -f "$NEWTEMPLETE2G"/template-fr.html "$DIRE2GLANG"french/template.html
    sed -i "s/é/\&eacute;/g" "$DIRE2GLANG"french/messages
    sed -i "s/è/\&egrave;/g" "$DIRE2GLANG"french/messages
    $E2GUARDIANrestart
    echo "</confe2guardian>"
}

privoxydefaultfilteroff() {
    $SED "s?^PRIVOXYDF.*?PRIVOXYDF=OFF?g" $FILE_CONF
    $SED "s?^actionsfile match-all.action.*?#actionsfile match-all.action?g" "$PRIVOXYCONF"
    $SED "s?^actionsfile default.action.*?#actionsfile default.action?g" "$PRIVOXYCONF"
    $SED "s?^filterfile default.filter.*?#filterfile default.filter?g" "$PRIVOXYCONF"
    $PRIVOXYrestart
}

privoxydefaultfilteron() {
    $SED "s?^PRIVOXYDF.*?PRIVOXYDF=ON?g" $FILE_CONF
    $SED "s?#actionsfile match-all.action.*?actionsfile match-all.action?g" "$PRIVOXYCONF"
    $SED "s?#actionsfile default.action.*?actionsfile default.action?g" "$PRIVOXYCONF"
    $SED "s?#filterfile default.filter.*?filterfile default.filter?g" "$PRIVOXYCONF"
    $PRIVOXYrestart
}

confprivoxy() {
    echo "<confprivoxy>"
    $SED "s?^debug.*?debug = 0?g"  "$PRIVOXYCONF"
    test=$( grep -c "^listen-address.*" "$PRIVOXYCONF" )
    ligneipv4=$( sed -n '/^listen-address.*/=' "$PRIVOXYCONF" | sed '1q;d' )
    if [ "$test" -eq "1" ] ; then
	ligneipv6=$((ligneipv4 + 1))
	$SED "$ligneipv4 s?^listen-address.*?listen-address  127.0.0.1:$PROXYport?"  "$PRIVOXYCONF"
	$SED "$ligneipv6""i\listen-address  [::1]:$PROXYport" "$PRIVOXYCONF"
    else
	ligneipv6=$( sed -n '/^listen-address.*/=' "$PRIVOXYCONF" | sed '2q;d' )
	$SED "$ligneipv4 s?^listen-address.*?listen-address  127.0.0.1:$PROXYport?"  "$PRIVOXYCONF" #ipv4
	$SED "$ligneipv6 s?^listen-address.*?listen-address  [::1]:$PROXYport?"  "$PRIVOXYCONF" #ipv6
    fi
    unset test
    test=$(grep -c "actionsfile ctparental.action" "$PRIVOXYCONF" )
    if [ "$test" -ge "1" ] ; then
	$SED "s?actionsfile.*ctparental.*?actionsfile ctparental\.action      # ctparental customizations?g" "$PRIVOXYCONF"
    else
	nline=$(grep "actionsfile.*user.action" "$PRIVOXYCONF" -n | cut -d":" -f1)
	$SED "$nline""i\actionsfile ctparental.action      # ctparental customizations" "$PRIVOXYCONF"
    fi
    unset test
    cat << 'EOF' >  $PRIVOXYCTA
{{alias}}
+crunch-all-cookies = +crunch-incoming-cookies +crunch-outgoing-cookies
-crunch-all-cookies = -crunch-incoming-cookies -crunch-outgoing-cookies
 allow-all-cookies  = -crunch-all-cookies -session-cookies-only -filter{content-cookies}
 allow-popups       = -filter{all-popups} -filter{unsolicited-popups}
+block-as-image     = +block{Blocked image request.} +handle-as-image
-block-as-image     = -block
fragile     = -block -crunch-all-cookies -filter -fast-redirects -hide-referer -prevent-compression
shop        = -crunch-all-cookies allow-popups
myfilters   = +filter{html-annoyances} +filter{js-annoyances} +filter{all-popups}\
              +filter{webbugs} +filter{banners-by-size}
allow-ads   = -block -filter{banners-by-size} -filter{banners-by-link}
{ fragile }
http://admin.ct.local.*
http://privet.ct.local.*
http://localhost.*
# BING Add &adlt=strict
{+redirect{s@$@&adlt=strict@}}
.bing./.*[&?]q=
{-redirect}
.bing./.*&adlt=strict

# dailymotion.com
# remplace http://www.dailymotion.com/family_filter?enable=false....
# par http://www.dailymotion.com/family_filter?enable=true...
{+redirect{s@enable=[^&]+@enable=true@}}
 .dailymotion.*/.*enable=(?!true)


{+redirect{s@http://.*/images/close.*.png@http://privet.ct.local/images/X32px.png@}}
.*

{+redirect{s@http://.*/close.*.png@http://privet.ct.local/images/X32px.png@}}
.*


EOF

    $PRIVOXYrestart
    echo "</confprivoxy>"
}


addadminhttpd() {
    if [ ! -f "$PASSWORDFILEHTTPD" ]; then touch "$PASSWORDFILEHTTPD"; fi
    USERADMINHTTPD=${1}
    pass=${2}
    hash="$(echo -n "$USERADMINHTTPD"":""$REALMADMINHTTPD"":""$pass" | md5sum | cut -b -32)"
    ligne="$USERADMINHTTPD"":""$REALMADMINHTTPD"":""$hash"
    #echo $ligne
    $SED "/.*:$REALMADMINHTTPD.*/d" "$PASSWORDFILEHTTPD"
    echo "$ligne" >> "$PASSWORDFILEHTTPD"
    chown root:"$USERHTTPD" "$PASSWORDFILEHTTPD"
    chmod 640 "$PASSWORDFILEHTTPD"
}

download() {
    rm -rf $tempDIR
    mkdir $tempDIR
    # on attend que la connection remonte suite au redémarrage de networkmanager
    gettext 'Waiting to connect to Toulouse server:'
    i=1
    while [ "$(ping -c 1 $BL_SERVER 2> /dev/null | grep -c "1 received"  )" -eq 0 ]
    do
	echo -n .
	sleep 1
	i=$(( i + 1 ))
	# si au bout de 40 secondes on n'a toujours pas de connection on considère qu'il y a une erreur
	if [ $i -ge 40 ];then
	   gettext 'Connection to Toulouse server is impossible.'
	   set -e
	   exit 1
	fi
    done
    echo
    gettext 'connection established:'

    wget -P $tempDIR http://$BL_SERVER/blacklists/download/blacklists.tar.gz 2>&1 | cat
    if [ ! $? -eq 0 ]; then
        gettext 'error when downloading, process interrupted'
        rm -rf $tempDIR
        set -e
        exit 1
    fi
    tar -xzf $tempDIR/blacklists.tar.gz -C $tempDIR
    if [ ! $? -eq 0 ]; then
        gettext 'archive extraction error, process interrupted'
        set -e
        exit 1
    fi
    # on télécharge aussi la blacklist personalisée de ctparental
    wget -P $tempDIR https://github.com/marsat/bl_ctparental/raw/master/blacklist.tar.gz 2>&1 | cat
    if [ ! $? -eq 0 ]; then
        gettext 'error when downloading, process interrupted'
        rm -rf $tempDIR
        set -e
        exit 1
    fi
    tar -xzf $tempDIR/blacklist.tar.gz -C $tempDIR
    if [ ! $? -eq 0 ]; then
        gettext 'archive extraction error , process interrupted'
        set -e
        exit 1
    fi
    rm -rf ${DIR_DNS_FILTER_AVAILABLE:?}/
    mkdir $DIR_DNS_FILTER_AVAILABLE
    $SED "s?^MD5DREAB.*?MD5DREAB=?g" $FILE_CONF
}

autoupdate() {
     LASTUPDATEDAY=$(grep LASTUPDATE= "$FILE_CONF" | cut -d"=" -f2)
     LASTUPDATEDAY=${LASTUPDATEDAY:=0}
     DIFFDAY=$(( THISDAYS - LASTUPDATEDAY ))
     if [ $DIFFDAY -ge $MAXDAYSFORUPDATE ] ; then
	download
	adapt
	catChoice
	dnsmasqon
	$SED "s?^LASTUPDATE.*?LASTUPDATE=$THISDAYS=$(date +%d-%m-%Y\ %T)?g" $FILE_CONF
	exit 0
     fi
}

autoupdateon() {
     $SED "s?^AUTOUPDATE.*?AUTOUPDATE=ON?g" $FILE_CONF
     echo "PATH=$PATH"  > /etc/cron.d/CTparental-autoupdate
     echo "*/10 * * * * root $CHEMINCTPARENTLE -aup > /dev/null" >> /etc/cron.d/CTparental-autoupdate
     $CRONrestart
}

autoupdateoff() {
     $SED "s?^AUTOUPDATE.*?AUTOUPDATE=OFF?g" $FILE_CONF
     rm -f /etc/cron.d/CTparental-autoupdate
     $CRONrestart
}

adapt() {
     echo adapt
     date +%H:%M:%S
     dnsmasqoff
     $MFILEtmp
     if [ ! -f $DNS_FILTER_OSSI ] ; then
	echo > $DNS_FILTER_OSSI
     fi
     if [ -d $tempDIR  ] ; then
	CATEGORIES_AVAILABLE="$tempDIR"/categories_available
	echo -n > $CATEGORIES_AVAILABLE
	echo -n > $WL_CATEGORIES_AVAILABLE
	echo -n > $BL_CATEGORIES_AVAILABLE
	if [ ! -f $DIR_DNS_FILTER_AVAILABLE/ossi.conf ] ; then
	    echo > $DIR_DNS_FILTER_AVAILABLE/ossi.conf
	fi
	gettext 'Toulouse Blacklist and WhiteList migration process. Please wait.'
	cd "$tempDIR"/blacklists
	for categorie in *
	do
	    if [ -d "$categorie" ] ; then
		if [ ! -L "$categorie" ] ; then
		    echo "$categorie" >> $CATEGORIES_AVAILABLE
		    echo -n "."
		    cp -f "$tempDIR"/blacklists/"$categorie"/domains "$FILE_tmp"
		    if [ $categorie = "adult" ] ; then
			# on supprime les 1313541 entrées xx.blogspot.xx
			# dans la catégorie adult qui sont gérées par
			# une liste beaucoup plus courte dans la
			# catégorie ctparental
			$SED "/.*blogspot\..*/d" "$FILE_tmp"
		    fi
		    $SED -r '/([0-9]{1,3}\.){3}[0-9]{1,3}/d' "$FILE_tmp"
		    $SED "/[äâëêïîöôüû]/d" "$FILE_tmp"
		    $SED "/^#.*/d" "$FILE_tmp"
		    $SED "/^$/d" "$FILE_tmp"
		    $SED "s/\.\{2,10\}/\./g" "$FILE_tmp"
		    if [ -e "$tempDIR"/blacklists/"$categorie"/usage ] ; then
			if [ "$(grep -c "white" "$tempDIR"/blacklists/"$categorie"/usage)" -ge 1 ] ;then
			    echo "$categorie" >> $WL_CATEGORIES_AVAILABLE
			    # Mise en forme dnsmasq des listes blanches
			    $SED "s?.*?server=/&/#?g" "$FILE_tmp"
			    mv "$FILE_tmp" "$DIR_DNS_FILTER_AVAILABLE"/"$categorie".conf
			else
			    echo "$categorie" >> $BL_CATEGORIES_AVAILABLE
			    # Mise en forme dnsmasq des listes noires
			    $SED "s?.*?address=/&/$PRIVATE_IP4?g" "$FILE_tmp"
			    mv "$FILE_tmp" "$DIR_DNS_FILTER_AVAILABLE"/"$categorie".conf
			fi
		    else
			echo "$categorie" >> $BL_CATEGORIES_AVAILABLE
			# Mise en forme dnsmasq des listes noires
			$SED "s?.*?address=/&/$PRIVATE_IP4?g" "$FILE_tmp"
			mv "$FILE_tmp" "$DIR_DNS_FILTER_AVAILABLE"/"$categorie".conf
		    fi
		fi
	    fi
	done
	echo -n "."
	# suppression des @IP, de caractères acccentués et des lignes commentées ou vides
	cp -f $DNS_FILTER_OSSI "$FILE_tmp"
	$SED -r '/([0-9]{1,3}\.){3}[0-9]{1,3}/d' "$FILE_tmp"
	$SED "/[äâëêïîöôüû]/d" "$FILE_tmp"
	$SED "/^#.*/d" "$FILE_tmp"
	$SED "/^$/d" "$FILE_tmp"
	# supprime les suite de "." exemple:
	# address=/fucking-big-tits..com/127.0.0.10 devient
	# address=/fucking-big-tits.com/127.0.0.10
	$SED "s/\.\{2,10\}/\./g" "$FILE_tmp"
	# Mise en forme dnsmasq
	$SED "s?.*?address=/&/$PRIVATE_IP4?g" "$FILE_tmp"
	mv "$FILE_tmp" "$DIR_DNS_FILTER_AVAILABLE"/ossi.conf
     else
	mkdir   $tempDIR
	echo -n "."
	# suppression des @IP, de caractères acccentués et des lignes commentées ou vides
	cp -f $DNS_FILTER_OSSI "$FILE_tmp"
	$SED -r '/([0-9]{1,3}\.){3}[0-9]{1,3}/d' "$FILE_tmp"
	$SED "/[äâëêïîöôüû]/d" "$FILE_tmp"
	$SED "/^#.*/d" "$FILE_tmp"
	$SED "/^$/d" "$FILE_tmp"
	# supprime les suite de "." exemple:
	# address=/fucking-big-tits..com/127.0.0.10 devient
	# address=/fucking-big-tits.com/127.0.0.10
	$SED "s/\.\{2,10\}/\./g" "$FILE_tmp"
	# Mise en forme dnsmasq
	$SED "s?.*?address=/&/$PRIVATE_IP4?g" "$FILE_tmp"
	mv "$FILE_tmp" "$DIR_DNS_FILTER_AVAILABLE"/ossi.conf
     fi
     echo
     $UMFILEtmp
     cd "$(dirname "$(readlink -f "$0")")"
     rm -rf $tempDIR
     date +%H:%M:%S
}

catChoice() {
     echo "<catChoice>"
     md5old=$(grep MD5DREAB= "$FILE_CONF" | cut -d"=" -f2)
     md5new="$({
cat "$DREAB" "$CATEGORIES_ENABLED" "$SAFE_CONF"
echo "$DOMAINEDEPOTS"
md5sum $DIR_DNS_FILTER_AVAILABLE/* | grep -v ossi.conf
} | md5sum )"
     ## évite de lancer la moulinette de réhabilitation des domaines
     ## quand aucun changement ne le nécéssite.
     if [ ! "$md5old" = "$md5new" ]; then
	rm -rf ${DIR_DNS_BLACKLIST_ENABLED:?}/
	mkdir $DIR_DNS_BLACKLIST_ENABLED
	rm -rf  ${DIR_DNS_WHITELIST_ENABLED:?}/
	mkdir  $DIR_DNS_WHITELIST_ENABLED
	while read CATEGORIE
	do
	    if [ "$(grep -c "$CATEGORIE" "$BL_CATEGORIES_AVAILABLE")" -ge "1" ] ; then
		cp $DIR_DNS_FILTER_AVAILABLE/"$CATEGORIE".conf $DIR_DNS_BLACKLIST_ENABLED/
	    else
		cp $DIR_DNS_FILTER_AVAILABLE/"$CATEGORIE".conf $DIR_DNS_WHITELIST_ENABLED/
	    fi
	done < $CATEGORIES_ENABLED
	reabdomaine
	$SED "s?^MD5DREAB.*?MD5DREAB=$md5new?g" $FILE_CONF
	iptablesreload
     fi
     cp $DIR_DNS_FILTER_AVAILABLE/ossi.conf $DIR_DNS_BLACKLIST_ENABLED/
     echo "</catChoice>"
}

reabdomaine() {
     echo "<reabdomaine>"
     date +%H:%M:%S
     $MFILEtmp
     if [ ! -f $DREAB ] ; then
	cat << EOF > $DREAB
EOF
     fi
     $SED -r '/([0-9]{1,3}\.){3}[0-9]{1,3}/d' "$DREAB"
     $SED "/[äâëêïîöôüû]/d" "$DREAB"
     $SED "/^#.*/d" "$DREAB"
     $SED "/^$/d" "$DREAB"
     $SED "s/\.\{2,10\}/\./g" "$DREAB"
     if [ ! -f $DIR_DNS_BLACKLIST_ENABLED/ossi.conf ] ; then
	echo > $DIR_DNS_BLACKLIST_ENABLED/ossi.conf
     fi
     echo
     gettext 'Application whitelisting (restored area):'
     while read CATEGORIE
     do
	if [ "$(grep -c "$CATEGORIE" "$BL_CATEGORIES_AVAILABLE" )" -ge "1" ] ; then
	    echo -n "."
	    while read DOMAINE
	    do
		cp -f $DIR_DNS_BLACKLIST_ENABLED/"$CATEGORIE".conf "$FILE_tmp"
		$SED "/$DOMAINE/d" "$FILE_tmp"
		cp -f "$FILE_tmp" $DIR_DNS_BLACKLIST_ENABLED/"$CATEGORIE".conf
	    done < $DREAB

	    for DOMAINE in $DOMAINEDEPOTS
	    do
		cp -f $DIR_DNS_BLACKLIST_ENABLED/"$CATEGORIE".conf "$FILE_tmp"
		$SED "/$DOMAINE/d" "$FILE_tmp"
		cp -f "$FILE_tmp" $DIR_DNS_BLACKLIST_ENABLED/"$CATEGORIE".conf
	    done
	fi
     done < $CATEGORIES_ENABLED

     {
	echo 'localhost'
	echo '127.0.0.1'
	echo "$PRIVATE_IP4"
	echo "$ADMIN_IP4"
	echo "$BL_SERVER"
	for domain in $DOMAINEDEPOTS
	do
	    echo "$domain"
	done
	cat < "$DREAB" | sed -e"s/^\.//g" | sed -e"s/^www.//g"
     }  > "$E2GUXSITELIST"

     echo -n "."
     {
	echo "$BL_SERVER" | sed -e "s? ??g" | sed -e "s?.*?server=/&/#?g"
	for domain in $DOMAINEDEPOTS
	do
	    echo "$domain" | sed -e "s? ??g" | sed -e "s?.*?server=/&/#?g"
	done

     }> "$DIR_DNS_WHITELIST_ENABLED"/whiteliste.depots.conf

     cat < "$DREAB" | sed -e "s? ??g" | sed -e "s?.*?server=/&/#?g" >  "$DIR_DNS_WHITELIST_ENABLED"/whiteliste.ossi.conf
     echo
     $UMFILEtmp
     rm -f "$FILE_tmp"
     date +%H:%M:%S


     {
	## on force à passer par forcesafesearch.google.com de
	## manière transparente
	# retrieve forcesafesearch.google.com ip
	forcesafesearchgoogle=$(host -ta forcesafesearch.google.com|cut -d" " -f4)
	if [ "$( grep -c "^SAFEGOOGLE" $SAFE_CONF )" -eq 1 ];then
	    echo "# forcesafesearch redirect server for google"
	    # pour chaque sous domaine de google
	    for subdomaingoogle in $(wget http://www.google.com/supported_domains -O - 2> /dev/null )
	    do
		echo "address=/www$subdomaingoogle/$forcesafesearchgoogle"
	    done
	fi
	if [ "$( grep -c "^SAFEYOUTUBE" $SAFE_CONF )" -eq 1 ];then
	    echo "address=/www.youtube.com/$forcesafesearchgoogle"
	fi
	## on force à passer par strict.bing.com de manière transparente
	if [ "$( grep -c "^SAFEBING" $SAFE_CONF )" -eq 1 ];then
	    echo "address=/.bing.com/$(host -ta strict.bing.com |cut -d" " -f4 | grep -v alias | sed '1q;d')"
	fi

	if [ "$( grep -c "^SAFEDUCK" $SAFE_CONF )" -eq 1 ];then
	    echo "# on force a passer par safe.duckduckgo.com"
	    echo "address=/safe.duckduckgo.com/$(host -ta safe.duckduckgo.com|cut -d" " -f4 | grep -v alias | sed '1q;d')"
	    ## les requêtes sur http(s)://duckduckgo.com sont
	    ## redirigées vers lighttpd qui les renvoie vers
	    ## safe.duckduckgo.com
	    echo "address=/duckduckgo.com/$ADMIN_IP4"
	fi

	if [ "$( grep -c "^SAFEQWANT" $SAFE_CONF  )" -eq 1 ];then
	    echo "# on force a passer par www.qwantjunior.com"
	    echo "address=/www.qwantjunior.com/$(host -ta www.qwantjunior.com|cut -d" " -f4 | grep -v alias | sed '1q;d')"
	    ## les requêtes sur http(s)://www.qwant.com sont
	    ## redirigées vers lighttpd qui les renvoie vers
	    ## www.qwantjunior.com
	    echo "address=/www.qwant.com/$ADMIN_IP4"
	fi

	echo "address=/.dailymotion.com/$(host -ta dailymotion.com|cut -d" " -f4 | grep -v alias | sed '1q;d')"

	# on bloque les moteurs de recherche pas assez sûrs
	echo "address=/search.yahoo.com/$PRIVATE_IP4"

	# pour les navigateurs qui ne prennent pas en compte
	# /etc/hosts comme google chrome
	echo "address=/admin.ct.local/$ADMIN_IP4"
	echo "address=/admin.ct.local/$ADMIN_IP6"
	echo "address=/privet.ct.local/$PRIVATE_IP4"
	echo "address=/privet.ct.local/$PRIVATE_IP6"
     } > $DIR_DNS_BLACKLIST_ENABLED/forcesafesearch.conf

     echo "</reabdomaine>"
}

dnsmasqon() {
     echo "<dnsmasqon>"

     if [ "$(grep -c "$(sed -n "1 p" $CATEGORIES_ENABLED)" "$BL_CATEGORIES_AVAILABLE" )" -ge "1" ] ; then
	$SED "s?^DNSMASQ.*?DNSMASQ=BLACK?g" $FILE_CONF

	# on crée l'utilisateur dnsmasq si il n'existe pas déjà (comme
	# sous mageia par exemple). Pas utile sous debian et ubuntu,
	# car déjà fait par le deb
	if [ -z "$(id -u dnsmasq 2> /dev/null)" ]; then
	   adduser --system  --home /dev/null --comment "system user for dnsmasq" --no-create-home --shell /bin/false dnsmasq
	fi
	# on paramètre le service à se lancer avec l'utilisateur
	# dnsmasq. Pas utile sous debian et ubuntu, car déjà fait par
	# le deb
	if [ -f /etc/sysconfig/dnsmasq ] ; then
	   $SED "s?^OPTIONS.*?OPTIONS= --user=dnsmasq?g" /etc/sysconfig/dnsmasq
	fi

	cat << EOF > $DNSMASQCONF
# Configuration file for "dnsmasq with blackhole"
# Inclusion de la blacklist <domains> de Toulouse dans la configuration
conf-dir=$DIR_DNS_BLACKLIST_ENABLED
# conf-file=$DIR_DEST_ETC/alcasar-dns-name   # zone de definition de noms DNS locaux
interface=lo
listen-address=127.0.0.1
port=54
no-dhcp-interface=$i_WAN_ipv4
no-dhcp-interface=$i_WAN_ipv6
no-dhcp-interface=lo
bind-interfaces
cache-size=1024
domain-needed
expand-hosts
bogus-priv
server=$DNS1v4
server=$DNS2v4
server=$DNS1v6
server=$DNS2v6

EOF

	# redémarre dnsmasq en prenant en compte la présence ou non de resolvconf.
	resolvconffixon
	$E2GUARDIANrestart
	$PRIVOXYrestart
    else
	dnsmasqwhitelistonly
    fi
    echo "</dnsmasqon>"
}

dnsmasqoff() {
    echo "<dnsmasqoff>"
    $SED "s?^DNSMASQ.*?DNSMASQ=OFF?g" $FILE_CONF
    resolvconffixon
    $E2GUARDIANrestart
    $PRIVOXYrestart
    echo "</dnsmasqoff>"
}

ipglobal() {
    echo "<ipglobal>"
    ### BLOQUE TOUT PAR DEFAUT (si aucune règle n'est définie par la suite) ###
    $IPTABLES -P INPUT DROP
    $IPTABLES -P OUTPUT DROP
    $IPTABLES -P FORWARD DROP
    $IPTABLES6 -P INPUT DROP
    $IPTABLES6 -P OUTPUT DROP
    $IPTABLES6 -P FORWARD DROP
    # TCP Syn Flood
    $IPTABLES -A INPUT -p tcp --syn -m limit --limit 3/s -j ACCEPT
    $IPTABLES6 -A INPUT -p tcp --syn -m limit --limit 3/s -j ACCEPT
    # UDP Syn Flood
    $IPTABLES -A INPUT -p udp -m limit --limit 10/s -j ACCEPT
    $IPTABLES6 -A INPUT -p udp -m limit --limit 10/s -j ACCEPT
    ### IP indésirables
    if [ -e "$FILEIPBLACKLIST" ] ;  then
    echo "<$FILEIPBLACKLIST>"
	while read ligne
	do
	   ipdrop=$(echo "$ligne" | cut -d " " -f1)
	   if [ "$( ipV4ok "$ipdrop" )" -eq 1 ] ;then
		$IPTABLES -I INPUT  -s "$ipdrop" -j DROP
		$IPTABLES -I OUTPUT  -d "$ipdrop" -j DROP
	   fi
	   if [ "$( ipV6ok "$ipdrop" )" -eq 1 ] ;then
		$IPTABLES6 -I INPUT  -s "$ipdrop" -j DROP
		$IPTABLES6 -I OUTPUT  -d "$ipdrop" -j DROP
	   fi
	done < $FILEIPBLACKLIST
	echo "</$FILEIPBLACKLIST>"
    else
    {
	echo '# - one ip per line.
# - ipv4 address or subnet ipv4 / mask (ip/xxx.xxx.xxx.xxx or ip/1 to 32)
# - ipv6 address or subnet ipv6 / mask (ip/ 1 to 128)
# examples:
# 10.10.2.3
# 192.168.182.0/24
# 2001:db8::f23f
# 2001:db8::/44'
	} >  $FILEIPBLACKLIST
	chown root:root  $FILEIPBLACKLIST
	chmod 750  $FILEIPBLACKLIST
    fi
    ## bloque le multicast dns (mDNS)
    $IPTABLES6 -A OUTPUT -p udp --dport 5353 -j DROP
    $IPTABLES6 -A INPUT -p udp --sport 5353 -j DROP
    $IPTABLES -A OUTPUT -p udp --dport 5353 -j DROP
    $IPTABLES -A INPUT -p udp --sport 5353 -j DROP
    
    ### ACCEPT ALL interface loopback ###
    $IPTABLES -A INPUT  -i lo -j ACCEPT
    $IPTABLES -A OUTPUT -o lo -j ACCEPT
    $IPTABLES6 -A INPUT  -i lo -j ACCEPT
    $IPTABLES6 -A OUTPUT -o lo -j ACCEPT

    ## accépter requette ipv6 de recherche de routeurs
    $IPTABLES6 -A OUTPUT -p icmpv6 -d ff02::2  -j ACCEPT
    $IPTABLES6 -A OUTPUT -p icmpv6 -d ff02::16  -j ACCEPT

    ### accepte en entrée les connexions déjà établies (en gros cela
    ### permet d'accepter les connexions initiées par son propre PC)
    $IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPTABLES6 -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    ### DHCP
    $IPTABLES -A OUTPUT -p udp --sport 68 --dport 67 -j ACCEPT
    $IPTABLES -A INPUT -p udp --sport 67 --dport 68 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p udp --sport 68 --dport 67 -j ACCEPT
    $IPTABLES6 -A INPUT -p udp --sport 67 --dport 68 -j ACCEPT

    ### DNS indispensable pour naviguer facilement sur le web ###
    $IPTABLES -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT
    $IPTABLES -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
    $IPTABLES -A OUTPUT -d 127.0.0.1 -p tcp -m tcp --dport 54 -j ACCEPT
    $IPTABLES -A OUTPUT -d 127.0.0.1 -p udp -m udp --dport 54 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
    $IPTABLES6 -A OUTPUT -d ::1 -p tcp -m tcp --dport 54 -j ACCEPT
    $IPTABLES6 -A OUTPUT -d ::1 -p udp -m udp --dport 54 -j ACCEPT

    ### HTTP navigation internet non sécurisée ###
    $IPTABLES -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT

    ### HTTPS pour le site des banques .... ###
    $IPTABLES -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT

    ### ping ... autorise à "pinger" un ordinateur distant ###
    $IPTABLES -A OUTPUT -p icmp -j ACCEPT
    $IPTABLES6 -A OUTPUT -p icmpv6 -j ACCEPT

    ### clientNTP ... syncro à un serveur de temps ###
    $IPTABLES -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT
    $IPTABLES6 -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT

    # On autorise les requêtes FTP
    modprobe ip_conntrack_ftp
    $IPTABLES -A OUTPUT -p tcp --dport 21 -j ACCEPT
    $IPTABLES -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPTABLES6 -A OUTPUT -p tcp --dport 21 -j ACCEPT
    $IPTABLES6 -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

    if [ -e "$FILEIPTABLES" ] ;  then
    echo "<$FILEIPTABLES>"
	source "$FILEIPTABLES"
	echo "</$FILEIPTABLES>"
    else
	initfileiptables
	source "$FILEIPTABLES"
    fi
    ### LOG ### Log tout ce qui qui n'est pas accepté par une règle précédente
    $IPTABLES6 -A OUTPUT -j LOG  --log-prefix "ip6tables: "
    $IPTABLES6 -A INPUT -j LOG   --log-prefix "ip6tables: "
    $IPTABLES6 -A FORWARD -j LOG  --log-prefix "ip6tables: "
    $IPTABLES -A OUTPUT -j LOG  --log-prefix "iptables: "
    $IPTABLES -A INPUT -j LOG   --log-prefix "iptables: "
    $IPTABLES -A FORWARD -j LOG  --log-prefix "iptables: "

    if [ ! -e $RSYSLOGCTPARENTAL ] ;  then
    {
    echo '
:msg,contains,"iptables: " /var/log/iptables/iptables.log
&~

:msg,contains,"ip6tables: " /var/log/iptables/ip6tables.log
&~

'
    } > $RSYSLOGCTPARENTAL
    $RSYSLOGRESTART
    fi
    if [ ! -e /etc/logrotate.d/iptables ] ; then
    {
    echo '
/var/log/iptables/*.log {
		daily
		missingok
		rotate 14
		compress
		delaycompress
		notifempty
		create 640 root adm
		sharedscripts
		postrotate
		service rsyslog restart ; sleep 5
		endscript
}
'
    } > /etc/logrotate.d/iptables
    fi
    echo "</ipglobal>"
}

initfileiptables() {
    cat << EOF >  $FILEIPTABLES
## on autorise tous le trafic sortant .
\$IPTABLES -A OUTPUT -j ACCEPT
## on autorise tous le trafic sortant à destination de notre lan (PC imprimante de la maison)
#\$IPTABLES -A OUTPUT -d \$reseau_box_ipv4 -j ACCEPT
## on acepte tous le trafic entrant en provenence de notre lan (PC imprimante de la maison)
\$IPTABLES -A INPUT -s \$reseau_box_ipv4 -j ACCEPT

### smtp + pop ssl thunderbird ...  ####
\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 993 -j ACCEPT		# imap/ssl
\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 995 -j ACCEPT		# pop/ssl
\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 465 -j ACCEPT     # smtp/ssl

## Client Steam voir infos https://support.steampowered.com/kb_article.php?ref=8571-GLVN-8711&l=french
#\$IPTABLES -A OUTPUT -p udp -m udp --dport 27000:27015 -j ACCEPT  		# (trafic pour le client jeu)
#\$IPTABLES -A OUTPUT -p udp -m udp --dport 27015:27030 -j ACCEPT  		# (en général pour les matchs et HLTV)
#\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 27014:27050 -j ACCEPT  		# (pour les téléchargements sur Steam)
#\$IPTABLES -A INPUT  -s \$reseau_box_ipv4 -p udp -m multiport --sports 27031,27036 -j ACCEPT 				# (entrant, pour le Streaming local)
#\$IPTABLES -A INPUT  -s \$reseau_box_ipv4 -p tcp -m multiport --sports 27036,27037 -j ACCEPT 				# (entrant, pour le Streaming local)
#\$IPTABLES -A OUTPUT -p udp -m udp --dport 4380 -j ACCEPT 			# chat audio Steam
## certains jeux nécessitent un accès direct sans proxy pour l'authentification https à ouvrir au cas par cas.
## exemple steam.goldenfrog.org
#\$IPTABLES -I OUTPUT -d 208.73.211.70 -m owner --uid-owner child1 -p tcp --dport 443 -j ACCEPT


## Serveurs dédiés ou Serveurs d'écoute
#\$IPTABLES -A INPUT  -p tcp --dport 27015 -j ACCEPT 					# (port Rcon SRCDS)

##Steamworks P2P et chat audio Steam
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 3478 -j ACCEPT
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 4379 -j ACCEPT
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 4380 -j ACCEPT

## Steam Ports supplémentaires pour for Call of Duty: Modern Warfare 2 Multijoueur
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 1500 -j ACCEPT
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 3005 -j ACCEPT
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 3101 -j ACCEPT
#\$IPTABLES -A OUTPUT -p udp -m udp --dport udp 28960 -j ACCEPT

# Ping Externe
# \$IPTABLES -A INPUT -i \$i_WAN_ipv4 -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT
# \$IPTABLES -A INPUT -i \$i_WAN_ipv4 -p icmp --icmp-type echo-reply -m limit --limit 1/s -j ACCEPT

### cups serveur , impriment partager sous cups
#\$IPTABLES -A OUTPUT -d \$ip_broadcast_ipv4 -p udp -m udp --sport 631 --dport 631 -j ACCEPT # diffusion des imprimantes partagées sur le réseau
#\$IPTABLES -A INPUT -s \$reseau_box_ipv4 -m state --state NEW -p TCP --dport 631 -j ACCEPT
#\$IPTABLES -I INPUT -s \$ipbox_ipv4 -m state --state NEW -p TCP --dport 631 -j DROP # drop les requêtes provenant de la passerelle

### emesene,pidgin,amsn...  ####
#\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 1863 -j ACCEPT
#\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 6891:6900 -j ACCEPT # pour transfert de fichiers , webcam
#\$IPTABLES -A OUTPUT -p udp -m udp --dport 6891:6900 -j ACCEPT # pour transfert de fichiers , webcam

###  smtp + pop thunderbird ...  ###
#\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
#\$IPTABLES -A OUTPUT -p tcp -m tcp --dport 110 -j ACCEPT
### client-transmission
# ouvre beaucoup de ports
#\$IPTABLES -A OUTPUT -p udp -m udp --sport 51413 --dport 1023:65535  -j ACCEPT
#\$IPTABLES -A OUTPUT -p tcp -m tcp --sport 30000:65535 --dport 1023:65535  -j ACCEPT
###Ryzom
#srvupdateRtzom=178.33.44.72
#srvRyzom1=176.31.229.93
#\$IPTABLES -A OUTPUT  -d \$srvupdateRtzom -p tcp --dport 873 -j ACCEPT
#\$IPTABLES -A OUTPUT  -d \$srvRyzom1 -p tcp --dport 43434 -j ACCEPT
#\$IPTABLES -A OUTPUT  -d \$srvRyzom1 -p tcp --dport 50000 -j ACCEPT
#\$IPTABLES -A OUTPUT  -d \$srvRyzom1 -p tcp --dport 40916 -j ACCEPT
#\$IPTABLES -A OUTPUT  -d \$srvRyzom1 -p udp --dport 47851:47860 -j ACCEPT
#\$IPTABLES -A OUTPUT  -d \$srvRyzom1 -p tcp --dport 47851:47860 -j ACCEPT
### Regnum Online
#\$IPTABLES -A OUTPUT  -d 91.123.197.131 -p tcp --dport 47300 -j ACCEPT # autentification
#\$IPTABLES -A OUTPUT  -d 91.123.197.142 -p tcp --dport 48000:48002  -j ACCEPT # nemon
### NeverWinter Nights 1
#\$IPTABLES -A OUTPUT  -p udp --dport 5120:5121 -j ACCEPT
#\$IPTABLES -I OUTPUT  -d 204.50.199.9 -j DROP # nwmaster.bioware.com permet d'éviter le temps d'attente avant l'ouverture du multijoueur " >>  $FILEIPTABLES
### LandesEternelles
#\$IPTABLES -A OUTPUT  -d 62.93.225.45 -p tcp --dport 3000 -j ACCEPT
### Batel for Wesnoth
#14998 pour version stable.
#14999 pour version stable précédente.
#15000 pour version de développement.
#15001 télécharger addons
#\$IPTABLES -A OUTPUT  -d 65.18.193.12 -p tcp --sport 1023:65535 --dport 14998:15001 -j ACCEPT
#\$IPTABLES -A INPUT   -p tcp --sport 1023:65535 --dport 15000 -j ACCEPT
EOF

    chown root:root  $FILEIPTABLES
    chmod 750  $FILEIPTABLES
}

iptablesreload() {
    echo "<iptablesreload>"
    ### SUPPRESSION de TOUTES LES ANCIENNES TABLES (OUVRE TOUT!!) ###
    $IPTABLES6 -F
    $IPTABLES6 -X
    $IPTABLES6 -t nat -F
    $IPTABLES6 -t mangle -F
    $IPTABLES6 -t nat -X
    $IPTABLES6 -t nat -N ctparental
    $IPTABLES6 -P INPUT ACCEPT
    $IPTABLES6 -P OUTPUT ACCEPT
    $IPTABLES6 -P FORWARD ACCEPT
    $IPTABLES -F
    $IPTABLES -X
    $IPTABLES -t nat -F
    $IPTABLES -t mangle -F
    $IPTABLES -t nat -X
    $IPTABLES -t nat -N ctparental
    $IPTABLES -P INPUT ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
    $IPTABLES -P FORWARD ACCEPT

    if [ ! "$FILTRAGEISOFF" -eq 1 ];then
	$IPTABLES -t nat -A OUTPUT -j ctparental
	$IPTABLES6 -t nat -A OUTPUT -j ctparental
    ## bloque le multicast dns (mDNS)
    $IPTABLES6 -A OUTPUT -p udp --dport 5353 -j DROP
    $IPTABLES6 -A INPUT -p udp --sport 5353 -j DROP
    $IPTABLES -A OUTPUT -p udp --dport 5353 -j DROP
    $IPTABLES -A INPUT -p udp --sport 5353 -j DROP

	# Force privoxy à utiliser dnsmasq sur le port 54 en ipv6 et en ipv4
	$IPTABLES -t nat -A ctparental -m owner --uid-owner "$PROXYuser" -p udp --dport 53 -j DNAT --to 127.0.0.1:54
	$IPTABLES6 -t nat -A ctparental -m owner --uid-owner "$PROXYuser" -p udp --dport 53 -j DNAT --to [::1]:54

	ipdailymotion=$( grep "address=/.dailymotion.com/" $DIR_DNS_BLACKLIST_ENABLED/forcesafesearch.conf | cut -d "/" -f3)
	# on rejette l'acces https à dailymotion.com
	$IPTABLES -A OUTPUT -d "$ipdailymotion" -m owner --uid-owner "$PROXYuser" -p tcp --dport 443 -j REJECT

	for user in $(listeusers) ; do
	    if  [ "$(groups "$user" | grep -c -E "( ctoff$)|( ctoff )|( root$)|( root )|( sudo$)|( sudo )" )" -eq 0 ];then
		#on redirige les requêtes DNS ipv4 des usagers filtrés sur dnsmasq très important pour l'https.
		$IPTABLES -t nat -A ctparental -m owner --uid-owner "$user" -p tcp --dport 53 -j DNAT --to 127.0.0.1:54
		$IPTABLES -t nat -A ctparental -m owner --uid-owner "$user" -p udp --dport 53 -j DNAT --to 127.0.0.1:54
		#on redirige les requêtes DNS ipv6 des usagers filtrés sur dnsmasq très important pour l'https.
		$IPTABLES6 -t nat -A ctparental -m owner --uid-owner "$user" -p tcp --dport 53 -j DNAT --to [::1]:54
		$IPTABLES6 -t nat -A ctparental -m owner --uid-owner "$user" -p udp --dport 53 -j DNAT --to [::1]:54
		#force passage par dansguardian pour les utilisateurs filtrés
		$IPTABLES -t nat -A ctparental ! -d 127.0.0.1/8 -m owner --uid-owner "$user" -p tcp --dport 80 -j DNAT --to 127.0.0.1:"$E2GUport"
		$IPTABLES -t nat -A ctparental ! -d 127.0.0.1/8 -m owner --uid-owner "$user" -p tcp --dport "$PROXYport" -j DNAT --to 127.0.0.1:"$E2GUport"
		# e2guardian ne gérant pas encore ipv6 on se contente de privoxy + dnsmasq on force donc le passage par privoxy pour le http.
		$IPTABLES6 -t nat -A ctparental -d 2000::/3 -m owner --uid-owner "$user" -p tcp --dport 80 -j DNAT --to [::1]:"$PROXYport"
		# on rejette l'accès https à dailymotion.com
		$IPTABLES -A OUTPUT -d "$ipdailymotion" -m owner --uid-owner "$user" -p tcp --dport 443 -j REJECT
		#$IPTABLES6 -t nat -A ctparental ! -d ::1 -m owner --uid-owner "$user" -p tcp --dport 80 -j DNAT --to [::1]:"$E2GUport"
		#$IPTABLES6 -t nat -A ctparental ! -d ::1 -m owner --uid-owner "$user" -p tcp --dport "$PROXYport" -j DNAT --to [::1]:"$E2GUport"
		#le proxy ne faisant que forwarder les flux https
		#forcer le passage par celui-ci pour https n'apporte
		#pas de sécurité seul dnsmasq peut bloquer.
		#$IPTABLES -t nat -A ctparental -m owner --uid-owner "$user" -p tcp --dport 443 -j DNAT --to 127.0.0.1:$E2GUport  # proxy https transparent n'est pas possible avec privoxy
		#$IPTABLES -A OUTPUT ! -d 127.0.0.1/8 -m owner --uid-owner "$user" -p tcp --dport 443 -j REJECT # on interdit l'accès https sans passer par le proxy pour les utilisateurs filtrés.
		#$IPTABLES6 -A OUTPUT ! -d ::1 -m owner --uid-owner "$user" -p tcp --dport 443 -j REJECT # pareil en ipv6
	   fi
	done
	if [ -e "$FILEIPTIMEWEB" ] ;  then
	   echo "<$FILEIPTIMEWEB>"
	   source "$FILEIPTIMEWEB"
	   echo "</$FILEIPTIMEWEB>"
	fi

	if [ "$( grep -c IPRULES=ON $FILE_CONF )" -eq 1 ];then
	   ipglobal
	fi
	#setproxy
	#else
	#unsetproxy
    fi

    # Save configuration so that it survives a reboot
    if [ "$IPTABLESsaveFILE" = "" ] ;then
	$IPTABLESsave
    else
	$IPTABLESsave > "$IPTABLESsaveFILE"
    fi
    if [ -e "$DIRHTML"/cactparental.crt ];then
	updatecauser
    fi
    echo "</iptablesreload>"
}

updatecauser() {
    echo "<updatecauser>"
    for user in $(listeusers) ; do
	HOMEPCUSER=$(getent passwd "$user" | cut -d ':' -f6)
	#on installe le cacertificat dans tous les profils firefox
    if [ -d "$HOMEPCUSER/.mozilla/firefox" ] ;then
	for cert8db in $(find $HOMEPCUSER/.mozilla/firefox/ -mindepth 2 -maxdepth 2 -name "cert8.db")
	do
	    cert8dbdir=$(dirname ${cert8db});
	    # on supprime tous les anciens certificats
	    while true
	    do
		certutil -D -d "$cert8dbdir"/ -n"CActparental - ctparental" 2&> /dev/null
		if [ ! $? -eq 0 ];then
		    break
		fi
	    done
	    # on ajoute le nouveau certificat
	    certutil -A -d "$cert8dbdir"/ -i "$DIRHTML"/cactparental.crt -n"CActparental - ctparental" -t "CT,c,c"
	    chown ${user}:${user} ${cert8db}
	    chown ${user}:${user} ${cert8dbdir}/key3.db
	    chown ${user}:${user} ${cert8dbdir}/pkcs11.txt
	done
	for cert9db in $(find $HOMEPCUSER/.mozilla/firefox/ -mindepth 2 -maxdepth 2 -name "cert9.db")
	do
	    cert9dbdir=$(dirname ${cert9db});
	    # on supprime tous les anciens certificats
	    while true
	    do
		certutil -D -d sql:"$cert9dbdir"/ -n"CActparental - ctparental" 2&> /dev/null
		if [ ! $? -eq 0 ];then
		    break
		fi
	    done
	    certutil -A -d sql:"$cert9dbdir"/ -i "$DIRHTML"/cactparental.crt -n"CActparental - ctparental" -t "CT,c,c"
	    chown ${user}:${user} ${cert9db}
	    chown ${user}:${user} ${cert9dbdir}/key4.db
	    chown ${user}:${user} ${cert9dbdir}/pkcs11.txt
	done
	fi
	#on install le cacertificat dans tous les profile chrome chromium
	if [ -f "$HOMEPCUSER/.pki/nssdb/cert9.db" ] ;then
	    cert9dbdir="$HOMEPCUSER/.pki/nssdb/"
	    # on supprime tous les anciens certificats
	    while true
	    do
		certutil -D -d sql:"$cert9dbdir"/ -n"CActparental - ctparental" 2&> /dev/null
		if [ ! $? -eq 0 ];then
		    break
		fi
	    done
	    certutil -A -d sql:"$cert9dbdir"/ -i "$DIRHTML"/cactparental.crt -n"CActparental - ctparental" -t "CT,c,c"
	    chown ${user}:${user} ${cert9db}
	    chown ${user}:${user} ${cert9dbdir}/key4.db
	    chown ${user}:${user} ${cert9dbdir}/pkcs11.txt
	fi
    done
     echo "</updatecauser>"
}

dnsmasqwhitelistonly() {
     $SED "s?^DNSMASQ.*?DNSMASQ=WHITE?g" $FILE_CONF
     cat << EOF > $DNSMASQCONF
# Configuration file for "dnsmasq with blackhole"
# Inclusion de la blacklist <domains> de Toulouse dans la configuration
conf-dir=$DIR_DNS_WHITELIST_ENABLED
# conf-file=$DIR_DEST_ETC/alcasar-dns-name   # zone de definition de noms DNS locaux
interface=lo
listen-address=127.0.0.1
port=54
no-dhcp-interface=$i_WAN_ipv4
no-dhcp-interface=$i_WAN_ipv6
no-dhcp-interface=lo
bind-interfaces
cache-size=1024
domain-needed
expand-hosts
bogus-priv
server=$DNS1v4
server=$DNS2v4
server=$DNS1v6
server=$DNS2v6
address=/localhost/127.0.0.1
address=/#/$PRIVATE_IP4 #redirige vers $PRIVATE_IP4 pour tout ce qui n'a pas été résolu dans les listes blanches
EOF

     $DNSMASQrestart
     $E2GUARDIANrestart
     $PRIVOXYrestart
 }

FoncHTTPDCONF() {
     echo "<FoncHTTPDCONF>"
     $LIGHTTPDstop
     rm -rf "${DIRHTML:?}"/*
     mkdir "$DIRHTML" 2> /dev/null
     mkdir -p "$DIRadminHTML"
     mkdir -p "$DIRHTML"
     if [ ! -z "$DIRhtmlPersonaliser" ];then
	cp -rf "$DIRhtmlPersonaliser"/* "$DIRHTML"
     else
	cp -rf "$DIR_SHARE"/www/CTparental/* "$DIRHTML"
     fi
     cp -rf "$DIR_SHARE"/www/CTadmin/* "$DIRadminHTML"

     chmod 644 "$FILE_CONF"
     chown root:"$GROUPHTTPD" "$FILE_CONF"
     cat << EOF > "$MAINCONFHTTPD"
server.modules = (
"mod_access",
"mod_magnet", # patch vulnerabilité httpoxy
"mod_alias",
"mod_redirect",
"mod_rewrite", # pour éviter erreur 404 lors de redirection dnsmasq sur 127.0.0.10
"mod_auth",	#pour interface admin
"mod_fastcgi",  #pour interface admin (activation du php)
)
auth.debug                 = 0
auth.backend               = "htdigest"
auth.backend.htdigest.userfile = "$PASSWORDFILEHTTPD"
magnet.attract-raw-url-to = ( "$DIR_CONF/deny-proxy.lua" )
server.document-root = "/var/www"
server.upload-dirs = ( "/var/cache/lighttpd/uploads" )
#server.errorlog = "/var/log/lighttpd/error.log" # ne pas decommenter sur les eeepc qui on /var/log  en tmpfs
server.pid-file = "$LIGHTTPpidfile"
server.username = "$USERHTTPD"
server.groupname = "$GROUPHTTPD"
server.port = 80
server.bind = "$ADMIN_IP4"

index-file.names = ( "index.php", "index.html" )
url.access-deny = ( "~", ".inc" )
static-file.exclude-extensions = (".php", ".pl", ".fcgi" )

server.tag = ""

# include_shell "/usr/share/lighttpd/use-ipv6.pl " + server.port
include_shell "/usr/share/lighttpd/create-mime.assign.pl"
include_shell "/usr/share/lighttpd/include-conf-enabled.pl"
EOF

     mkdir -p /usr/share/lighttpd/
     mkdir -p /var/cache/lighttpd/uploads
     chown -R "$USERHTTPD":"$GROUPHTTPD" /var/cache/lighttpd/uploads

     if [ ! -f /usr/share/lighttpd/create-mime.assign.pl ];then
	cat << EOF > /usr/share/lighttpd/create-mime.assign.pl
#!/usr/bin/perl -w
use strict;
open MIMETYPES, "/etc/mime.types" or exit;
print "mimetype.assign = (\n";
my %extensions;
while(<MIMETYPES>) {
  chomp;
  s/\#.*//;
  next if /^\w*$/;
  if(/^([a-z0-9\/+-.]+)\s+((?:[a-z0-9.+-]+[ ]?)+)$/) {
    foreach(split / /, \$2) {
      # mime.types can have same extension for different
      # mime types
      next if \$extensions{\$_};
      \$extensions{\$_} = 1;
      print "\".\$_\" => \"\$1\",\n";
    }
  }
}
print ")\n";
EOF
	chmod +x /usr/share/lighttpd/create-mime.assign.pl
     fi


     if [ ! -f /usr/share/lighttpd/include-conf-enabled.pl ];then
	cat << EOF > /usr/share/lighttpd/include-conf-enabled.pl
#!/usr/bin/perl -wl

use strict;
use File::Glob ':glob';

my \$confdir = shift || "/etc/lighttpd/";
my \$enabled = "conf-enabled/*.conf";

chdir(\$confdir);
my @files = bsd_glob(\$enabled);

for my \$file (@files)
{
        print "include \"\$file\"";
}
EOF
	chmod +x /usr/share/lighttpd/include-conf-enabled.pl

     fi

     ### patch vulnerabilité httpoxy
     if [ ! -f $DIR_CONF/deny-proxy.lua ];then
	cat << EOF > $DIR_CONF/deny-proxy.lua
if (lighty.request["Proxy"] == nil) then return 0 else return 403 end
EOF
     fi
     ###
     mkdir -p "$DIRCONFENABLEDHTTPD"

     if [ $nomanuel -eq 0 ]; then
	configloginpassword
     else
	## variables récupérees par héritage du script DEBIAN/postinst
	debconfloginhttp=${debconfloginhttp:="admin"}
	debconfpassword=${debconfpassword:="admin"}
	addadminhttpd "$debconfloginhttp" "$debconfpassword"
	unset debconfpassword
	unset debconfloginhttp
     fi

     mkdir /run/lighttpd/ 2> /dev/null
     chmod 770 /run/lighttpd/
     chown root:"$GROUPHTTPD" /run/lighttpd/

     cat << EOF > "$CTPARENTALCONFHTTPD"

fastcgi.server = (
    ".php" => (
      "localhost" => (
        "bin-path" => "/usr/bin/php-cgi",
        "socket" => "/run/lighttpd/php-fastcgi.sock",
        "max-procs" => 4, # default value
        "bin-environment" => (
          "PHP_FCGI_CHILDREN" => "1", # default value
        ),
        "broken-scriptfilename" => "enable"
      ))
)
  fastcgi.map-extensions     = ( ".php3" => ".php",
                               ".php4" => ".php",
                               ".php5" => ".php",
                               ".phps" => ".php",
                               ".phtml" => ".php" )


\$HTTP["host"] =~ "search.yahoo.com" {
	\$SERVER["socket"] == "$ADMIN_IP4:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/search.yahoo.com.pem"
	server.document-root = "$DIRHTML"
	server.errorfile-prefix = "$DIRHTML/err"
	}
}


\$HTTP["host"] =~ "duckduckgo.com" {
	\$SERVER["socket"] == "$ADMIN_IP4:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/duckduckgo.pem"
	url.redirect  = (".*" => "https://safe.duckduckgo.com\$0" )
	}
	\$SERVER["socket"] == "$ADMIN_IP4:80" {
	url.redirect  = (".*" => "https://safe.duckduckgo.com\$0" )
	}
}

\$HTTP["host"] =~ "www.qwant.com" {
	\$SERVER["socket"] == "$ADMIN_IP4:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/qwant.pem"
	url.redirect  = (".*" => "https://www.qwantjunior.com\$0" )
	}
	\$SERVER["socket"] == "$ADMIN_IP4:80" {
	url.redirect  = (".*" => "https://www.qwantjunior.com\$0" )
	}
}

\$SERVER["socket"] == "$PRIVATE_IP4:80" {
server.document-root = "$DIRHTML"
	\$HTTP["host"] != "privet.ct.local" {
		url.rewrite-once = ( ".*" => "/index.php" ) # on réécrit l'url en interne serveur pour que tous passe sur index.php
	}
}

\$SERVER["socket"] == "$PRIVATE_IP4:443" {
ssl.engine = "enable"
ssl.pemfile = "$PEMSRVDIR/ct.local.pem"
server.document-root = "$DIRHTML"
	\$HTTP["host"] != "privet.ct.local" {
		url.rewrite-once = ( ".*" => "/index.php" ) # on réécrit l'url en interne serveur pour que tous passe sur index.php
	}
}


\$SERVER["socket"] == "[$PRIVATE_IP6]:80" {
server.document-root = "$DIRHTML"
	\$HTTP["host"] != "privet.ct.local" {
		url.rewrite-once = ( ".*" => "/index.php" ) # on réécrit l'url en interne serveur pour que tous passe sur index.php
	}
}

\$SERVER["socket"] == "[$PRIVATE_IP6]:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/ct.local.pem"
	server.document-root = "$DIRHTML"
	\$HTTP["host"] != "privet.ct.local" {
		url.rewrite-once = ( ".*" => "/index.php" ) # on réécrit l'url en interne serveur pour que tous passe sur index.php
	}
}


\$HTTP["host"] =~ "admin.ct.local" {
	auth.require = ( "" =>
                   (
                     "method"  => "digest",
                     "realm"   => "$REALMADMINHTTPD",
                     "require" => "user=$USERADMINHTTPD"
                   )
                 )
	server.document-root = "$DIRadminHTML"
	\$SERVER["socket"] == "$ADMIN_IP4:80" {
		url.redirect  = (".*" => "https://admin.ct.local\$0" )
	}
	\$SERVER["socket"] == "$ADMIN_IP4:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/ct.local.pem"
	}
	\$SERVER["socket"] == "[$ADMIN_IP6]:80" {
		url.redirect  = (".*" => "https://admin.ct.local\$0" )
	}
	\$SERVER["socket"] == "[$ADMIN_IP6]:443" {
	ssl.engine = "enable"
	ssl.pemfile = "$PEMSRVDIR/ct.local.pem"
	}
}

\$HTTP["host"] =~ "$ADMIN_IP6" {
url.redirect  = (".*" => "https://admin.ct.local" )
}
\$HTTP["host"] =~ "$ADMIN_IP4" {
url.redirect  = (".*" => "https://admin.ct.local" )
}





EOF

     if [ -e "$DIRHTML/index.php" ] ;  then
	ln -s "$DIRHTML"/index.php "$DIRHTML"/err404.php
     else
	if [ -e "$DIRHTML/index.html" ] ;  then
	    ln -s  "$DIRHTML"/index.html "$DIRHTML"/err404.html
	fi
	$SED "s?^server.error-handler-404 =.*?server.error-handler-404 =\"err404.html\"?g" "$CTPARENTALCONFHTTPD"
     fi


     chown root:"$GROUPHTTPD" "$DREAB"
     chmod 664 "$DREAB"
     chown root:"$GROUPHTTPD" "$DNS_FILTER_OSSI"
     chmod 664 "$DNS_FILTER_OSSI"
     chown root:"$GROUPHTTPD" "$CATEGORIES_ENABLED"
     chmod 664 "$CATEGORIES_ENABLED"
     chown root:"$GROUPHTTPD" "$SAFE_CONF"
     chmod 664 "$SAFE_CONF"
     chmod 660 /etc/sudoers
     chown root:"$GROUPHTTPD" "${DIRE2G}lists/bannedextensionlist"
     chmod 664 "${DIRE2G}lists/bannedextensionlist"
     chown root:"$GROUPHTTPD" "${DIRE2G}lists/bannedmimetypelist"
     chmod 664 "${DIRE2G}lists/bannedmimetypelist"
     chown root:"$GROUPHTTPD" "${DIRE2G}lists/bannedsitelist"
     chmod 664 "${DIRE2G}lists/bannedsitelist"

     if [ "$(grep -c Defaults:"$USERHTTPD" /etc/sudoers )" -ge "1" ] ; then
	$SED "/^Defaults:$USERHTTPD/d" /etc/sudoers
     fi
     echo "Defaults:$USERHTTPD !requiretty" >> /etc/sudoers


     if [ "$(grep -c "^$USERHTTPD " /etc/sudoers )" -ge "1" ] ; then
	$SED "/^$USERHTTPD /d" /etc/sudoers
     fi
     echo "$USERHTTPD localhost=(root) NOPASSWD:/usr/bin/CTparental *" >> /etc/sudoers


     unset sudotest

     chmod 440 /etc/sudoers
     if [ ! -f $FILE_HCONF ] ; then
	echo > $FILE_HCONF
     fi
     chown root:"$GROUPHTTPD" "$FILE_HCONF"
     chmod 660 "$FILE_HCONF"
     if [ -f "$FILE_GCTOFFCONF" ] ; then
	chown root:"$GROUPHTTPD" "$FILE_GCTOFFCONF"
	chmod 660 "$FILE_GCTOFFCONF"
     fi

     if [ ! -f "$FILE_HCOMPT" ] ; then
	echo "date=$(date +%D)" > "$FILE_HCOMPT"
     fi
     chown root:"$GROUPHTTPD" "$FILE_HCOMPT"
     chmod 660 "$FILE_HCOMPT"

     chown -R root:"$GROUPHTTPD" "$DIRHTML"
     chown -R root:"$GROUPHTTPD" "$DIRadminHTML"
     CActparental
     $LIGHTTPDstart
     test=$?
     if [ ! $test -eq 0 ];then
	gettext 'Error launching of lighttpd service'
	set -e
	exit 1
     fi
     echo "</FoncHTTPDCONF>"
}

configloginpassword() {
     while true
     do
	loginhttp=$(whiptail --title "$(gettext 'Login')" --nocancel --inputbox "$(gettext 'Enter login to the administration interface')
$(gettext '	- Only letters or numbers.')
$(gettext '	- 5 characters minimum:')" 10 60 3>&1 1>&2 2>&3)
	loginhttp="$(echo "$loginhttp" | grep -E "^([a-zA-Z0-9])*$")"
	if [ "${#loginhttp}" -ge 5  ];then
	    break
	fi
     done
     while true
     do
	password=$(whiptail --title "$(gettext 'Password')" --nocancel --passwordbox "$(gettext 'Enter your password and press OK to continue.')" 10 60 3>&1 1>&2 2>&3)
	password2=$(whiptail --title "$(gettext 'Password')" --nocancel --passwordbox "$(gettext 'Confirm your password and press OK to continue.')" 10 60 3>&1 1>&2 2>&3)
	if [ "$password" = "$password2" ] ; then
	    password="$(echo "$password" | grep -E "^([a-z0-9A-Z]|[&éè~#{}()ç_@à?.;:/\!,\$<>=£\%\])*$")"
	    if [ "${#password}" -ge 8 ] ; then
		break
	    else
		whiptail --title "$(gettext "Password")" --msgbox "$(gettext "Password is not complex enough, it must contain at least:")
$(gettext "- 8 characters total, 1 uppercase, lowercase 1, number 1")
$(gettext "and one special character among the following") &éè~#{}()ç_@à?.;:/!,$<>=£% " 14 60
	    fi
	else
	    whiptail --title "$(gettext "Password")" --msgbox "$(gettext "The password entered is not identical to the first.")" 14 60
	fi
     done
     addadminhttpd "$loginhttp" "$password"
}

CActparental() {
     echo "<CActparental>"
     DIR_TMP=${TMPDIR-/tmp}/ctparental-mkcert.$$
     mkdir "$DIR_TMP"
     mkdir "$CADIR" 2> /dev/null

     ## création de la clef privée ca et du certificat ca
     openssl genrsa  1024 > "$DIR_TMP"/cactparental.key 2> /dev/null
     openssl req -new -x509 -sha256 -subj "/C=FR/ST=FRANCE/L=ici/O=ctparental/CN=CActparental" -days 5000 -key "$DIR_TMP"/cactparental.key > "$DIR_TMP"/cactparental.crt

     ## création clef et certificat *.ct.local et signature par le ca
     openssl genrsa 1024 > "$DIR_TMP"/ct.local.key 2> /dev/null
     openssl req -new -sha256  -subj "/C=FR/ST=FRANCE/L=ici/O=ctparental/CN=*.ct.local" -key "$DIR_TMP"/ct.local.key > "$DIR_TMP"/ct.local.csr
     openssl x509 -req -extfile <(printf "subjectAltName=DNS:admin.ct.local,DNS:privet.ct.local") -in "$DIR_TMP"/ct.local.csr -days 5000 -out "$DIR_TMP"/ct.local.crt -CA "$DIR_TMP"/cactparental.crt -CAkey "$DIR_TMP"/cactparental.key -CAcreateserial -CAserial "$DIR_TMP"/ca.srl

     ## création du certificat duckduckgo pour redirection vers safe.duckduckgo.com
     openssl genrsa 1024 > "$DIR_TMP"/duckduckgo.key 2> /dev/null
     openssl req -new -sha256 -subj "/C=FR/ST=FRANCE/L=ici/O=ctparental/CN=duckduckgo.com" -key "$DIR_TMP"/duckduckgo.key > "$DIR_TMP"/duckduckgo.csr
     openssl x509 -req  -extfile <(printf "subjectAltName=DNS:duckduckgo.com,DNS:www.duckduckgo.com") -in "$DIR_TMP"/duckduckgo.csr -days 5000 -out "$DIR_TMP"/duckduckgo.crt -CA "$DIR_TMP"/cactparental.crt -CAkey "$DIR_TMP"/cactparental.key -CAserial "$DIR_TMP"/ca.srl

     ## création du certificat www.qwant.com pour redirection vers www.qwantjunior.com
     openssl genrsa 1024 > "$DIR_TMP"/qwant.key 2> /dev/null
     openssl req -new -sha256 -subj "/C=FR/ST=FRANCE/L=ici/O=ctparental/CN=www.qwant.com" -key "$DIR_TMP"/qwant.key > "$DIR_TMP"/qwant.csr
     openssl x509 -req -extfile <(printf "subjectAltName=DNS:www.qwant.com,DNS:qwant.com") -in "$DIR_TMP"/qwant.csr -days 5000 -out "$DIR_TMP"/qwant.crt -CA "$DIR_TMP"/cactparental.crt -CAkey "$DIR_TMP"/cactparental.key -CAserial "$DIR_TMP"/ca.srl

    ## création du certificat search.yahoo.com pour redirection vers pages d'interdiction
    openssl genrsa 1024 > "$DIR_TMP"/search.yahoo.com.key 2> /dev/null
    openssl req -new -sha256 -subj "/C=FR/ST=FRANCE/L=ici/O=ctparental/CN=search.yahoo.com" -key "$DIR_TMP"/search.yahoo.com.key > "$DIR_TMP"/search.yahoo.com.csr
    openssl x509 -req -extfile <(printf "subjectAltName=DNS:www.search.yahoo.com,DNS:search.yahoo.com")  -in "$DIR_TMP"/search.yahoo.com.csr -days 5000 -out "$DIR_TMP"/search.yahoo.com.crt -CA "$DIR_TMP"/cactparental.crt -CAkey "$DIR_TMP"/cactparental.key -CAserial "$DIR_TMP"/ca.srl

    ## instalation de la CA dans les ca de confiance.
    cp -f "$DIR_TMP"/cactparental.crt "$CADIR"/
    cp -f "$DIR_TMP"/cactparental.crt "$DIRHTML"
    cp -f "$DIR_TMP"/cactparental.crt "$REPCAMOZ"
    ## instalation des certificats serveur
    cat "$DIR_TMP"/ct.local.key "$DIR_TMP"/ct.local.crt > "$PEMSRVDIR"/ct.local.pem
    cat "$DIR_TMP"/duckduckgo.key "$DIR_TMP"/duckduckgo.crt > "$PEMSRVDIR"/duckduckgo.pem
    cat "$DIR_TMP"/qwant.key "$DIR_TMP"/qwant.crt > "$PEMSRVDIR"/qwant.pem
    cat "$DIR_TMP"/search.yahoo.com.key "$DIR_TMP"/search.yahoo.com.crt > "$PEMSRVDIR"/search.yahoo.com.pem
    rm -rf "$DIR_TMP"
    $UPDATECASYSTEM
    updatecauser
    echo "</CActparental>"
}

install() {
    {
	echo "$ADMIN_IP4 admin.ct.local "
	echo "$ADMIN_IP6 admin.ct.local "
	echo "$PRIVATE_IP4 privet.ct.local "
	echo "$PRIVATE_IP6 privet.ct.local "
    } >> /etc/hosts
    # on réactive l'ipv6 si besoin.
    if [ "$( grep -c "net.ipv6.conf.all.disable_ipv6=" "$FILESYSCTL" )" -ge "1" ] ; then
	$SED "s?^net.ipv6.conf.all.disable_ipv6=.*?net.ipv6.conf.all.disable_ipv6=0?g" "$FILESYSCTL"
    fi
    if [ "$( grep -c "net.ipv6.conf.default.disable_ipv6=" "$FILESYSCTL" )" -ge "1" ] ; then
	$SED "s?^net.ipv6.conf.default.disable_ipv6=.*?net.ipv6.conf.default.disable_ipv6=0?g" "$FILESYSCTL"
    fi
    if [ "$( grep -c "net.ipv6.conf.lo.disable_ipv6=" "$FILESYSCTL" )" -ge "1" ] ; then
	$SED "s?^net.ipv6.conf.lo.disable_ipv6=.*?net.ipv6.conf.lo.disable_ipv6=0?g" "$FILESYSCTL"
    fi
    sysctl -p "$FILESYSCTL"
    ######################
    FILTRAGEISOFF=1
    if [ -f /etc/sysconfig/network-scripts/ifcfg-lo ] ;then
	{
	   echo "
DEVICE=lo:1
ONBOOT=yes
NAME=loopback
IPV6ADDR=$PRIVATE_IP6/128
"
	} > /etc/sysconfig/network-scripts/ifcfg-lo1

    {
	echo "
DEVICE=lo:2
ONBOOT=yes
NAME=loopback
IPV6ADDR=$ADMIN_IP6/128
"
    } > /etc/sysconfig/network-scripts/ifcfg-lo2

    fi
    if [ -f /etc/network/interfaces ];then
	mkdir /etc/network/interfaces.d 2&> /dev/null
	{
	   echo "
auto lo:1
iface lo:1 inet loopback
up ip addr add $PRIVATE_IP6/128 dev lo:1

auto lo:2
iface lo:2 inet loopback
up ip addr add $ADMIN_IP6/128 dev lo:2
"
	} > /etc/network/interfaces.d/ctparentallo

	if [ $( grep -c "source.*/etc/network/interfaces.d/*" /etc/network/interfaces ) -eq 0 ];then
	   echo "source /etc/network/interfaces.d/*" >> /etc/network/interfaces
	fi
    fi
    $NETWORKINGrestart
    if [ $nomanuel -eq 0 ]; then
	cp -rf www "$DIR_SHARE"
	cp -rf confe2guardian "$DIR_SHARE"
	cp -f locale/fr/LC_MESSAGES/ctparental.mo		/usr/share/locale/fr/LC_MESSAGES/
	cp -f locale/es/LC_MESSAGES/ctparental.mo		/usr/share/locale/es/LC_MESSAGES/
    fi
    iptablesreload
    groupadd ctoff

    if [ $nomanuel -eq 0 ]; then
	vim -h 2&> /dev/null
	if [ $? -eq 0 ] ; then
	   EDIT="vim "
	fi
	nano -h 2&> /dev/null
	if [ $? -eq 0 ] ; then
	   EDIT=${EDIT:="nano "}
	fi
	vi -h 2&> /dev/null
	if [ $? -eq 0 ] ; then
	   EDIT=${EDIT:="vi "}
	fi

	if [ -f gpl-3.0.fr.txt ] ; then
	   cp -f gpl-3.0.fr.txt "$DIR_SHARE"/
	fi
	if [ -f gpl-3.0.txt ] ; then
	   cp -f gpl-3.0.txt "$DIR_SHARE"/
	fi
	if [ -f CHANGELOG ] ; then
	   cp -f CHANGELOG "$DIR_SHARE"/
	fi
	if [ -f dist.conf ];then
	   cp -f dist.conf "$DIR_SHARE"/dist.conf.orig
	   cp -f dist.conf $DIR_CONF/
	fi
	while true; do
	   $EDIT $DIR_CONF/dist.conf
	   clear
	   grep -v -E ^# "$DIR_CONF"/dist.conf | grep -v ^$
	   gettext 'Enter: S to continue with these parameters.'
	   gettext 'Enter: Q to Quit setup.'
	   gettext 'Enter any other choice to change settings.'
	   read choi
	   case $choi in
		S | s )
		   break
		   ;;
		Q | q )
		   exit
		   ;;
	   esac
	done

    fi
    if [ -f $DIR_CONF/dist.conf ];then
	source  $DIR_CONF/dist.conf
    fi

    if [ -f /etc/NetworkManager/NetworkManager.conf ];then
	$SED "s/^dns=dnsmasq/#dns=dnsmasq/g" /etc/NetworkManager/NetworkManager.conf
	$NWMANAGERrestart
	sleep 5
    fi

    mkdir $tempDIR
    mkdir -p $DIR_CONF
    if [ ! -f $CATEGORIES_ENABLED ];then
	initblenabled
    fi
    cat /etc/resolv.conf > $DIR_CONF/resolv.conf.sav
    if [ $noinstalldep -eq 0 ]; then
	for PACKAGECT in $CONFLICTS
	do
	   cmd="${CMDREMOVE} ${PACKAGECT}"
	   $cmd 2> /dev/null
	done
    fi
    if [ $noinstalldep -eq 0 ]; then
	cmd="${CMDINSTALL} ${DEPENDANCES}"
	$cmd
    fi

    # on charge le(s) module(s) indispensable(s) pour iptables.
    if [ "$( grep -c ip_conntrack_ftp "$FILEMODULESLOAD" )" -ge "1" ] ; then
	$SED "s?.*ip_conntrack_ftp.*?#ip_conntrack_ftp?g" "$FILEMODULESLOAD"
    else
	echo "#ip_conntrack_ftp" >> "$FILEMODULESLOAD"
    fi
    modprobe ip_conntrack_ftp
    $SED "s?.*ip_conntrack_ftp.*?ip_conntrack_ftp?g" "$FILEMODULESLOAD"
    #######################
    if [ ! -f blacklists.tar.gz ]
    then
	download
    else
	tar -xzf blacklists.tar.gz -C $tempDIR
	if [ ! $? -eq 0 ]; then
            gettext 'archive extraction error , process interrupted'
            uninstall
            set -e
            exit 1
	fi
	rm -rf ${DIR_DNS_FILTER_AVAILABLE:?}/
	mkdir $DIR_DNS_FILTER_AVAILABLE
    fi
    adapt
    catChoice
    dnsmasqon
    $SED "s?^LASTUPDATE.*?LASTUPDATE=$THISDAYS=$(date +%d-%m-%Y\ %T)?g" $FILE_CONF
    confe2guardian
    confprivoxy
    FoncHTTPDCONF
    activegourpectoff
    FILTRAGEISOFF=0
    rm -f /etc/rsyslog.d/iptables.conf # for old install
    rm -f $RSYSLOGCTPARENTAL
    $RSYSLOGRESTART
    iptablesreload
    $ENCRON
    $ENLIGHTTPD
    $ENDNSMASQ
    $ENNWMANAGER
    $ENIPTABLESSAVE
    $ENE2GUARDIAN
    $ENPRIVOXY
    $ENNETWORK
    { echo "PATH=$PATH" ; echo "LANG=$LANG" ; }  > /etc/cron.d/CTparentalcron
    echo "*/1 * * * * root /usr/bin/CTparental -cron > /dev/null" >> /etc/cron.d/CTparentalcron
}

nomade() {
    echo "<nomade>"
    #### si il y a un changement dans la conf réseaux ####
    if [ "$DNS1v4" != "$( grep DNS1v4 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$DNS2v4" != "$( grep DNS2v4 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$DNS1v6" != "$( grep DNS1v6 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$DNS2v6" != "$( grep DNS2v6 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$i_WAN_ipv4" != "$( grep I_WAN_IPV4 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$i_WAN_ipv6" != "$( grep I_WAN_IPV6 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$ipbox_ipv4" != "$( grep IP_BOX_IPV4 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$ipbox_ipv6" != "$( grep IP_BOX_IPV6 $FILE_CONF | cut -d"=" -f2 )"  -o \
	"$ip_i_WAN_ipv4" != "$( grep IP_IWAN_IPV4 $FILE_CONF | cut -d"=" -f2 )" -o \
	"$ip_i_WAN_ipv6" != "$( grep IP_IWAN_IPV6 $FILE_CONF | cut -d"=" -f2 )" ]
    then
	networkisoknext
	# on sauvegarde ces changement dans le fichier de conf CTparental.
	$SED "/^I_WAN_IPV4=/d" "$FILE_CONF"
	$SED "/^I_WAN_IPV6=/d" "$FILE_CONF"
	$SED "/^IP_BOX_IPV4=/d" "$FILE_CONF"
	$SED "/^IP_BOX_IPV6=/d" "$FILE_CONF"
	$SED "/^IP_IWAN_IPV4=/d" "$FILE_CONF"
	$SED "/^IP_IWAN_IPV6=/d" "$FILE_CONF"
	$SED "/^DNS1v4=/d" "$FILE_CONF"
	$SED "/^DNS2v4=/d" "$FILE_CONF"
	$SED "/^DNS1v6=/d" "$FILE_CONF"
	$SED "/^DNS2v6=/d" "$FILE_CONF"
	{ echo I_WAN_IPV4="$i_WAN_ipv4"
	 echo IP_BOX_IPV4="$ipbox_ipv4"
	 echo IP_IWAN_IPV4="$ip_i_WAN_ipv4"
	 echo IP_IWAN_IPV6="$ip_i_WAN_ipv6"
	 echo I_WAN_IPV6="$i_WAN_ipv6"
	 echo DNS1v4="$DNS1v4"
	 echo DNS2v4="$DNS2v4"
	 echo DNS1v6="$DNS1v6"
	 echo DNS2v6="$DNS2v6"
	} >> $FILE_CONF
	# on modifie la conf dnsmasq
	dnsmasqon
	# on reconfigure les règles du pare-feu.
	iptablesreload
     fi
    echo "</nomade>"
}

updatelistgctoff() {
     result="0"
     if [ ! -f $FILE_GCTOFFCONF ] ; then
	echo -n > $FILE_GCTOFFCONF
     fi
     $MFILEtmp
     cp -f "$FILE_GCTOFFCONF" "$FILE_tmp"
     ## on ajoute tous les utilisateurs manquants dans la liste
     for PCUSER in $(listeusers)
     do
	if [ "$(cat < $FILE_tmp | sed -e "s/+//g" | sed -e "s/#//g" | grep -c -E "^$PCUSER$")" -eq 0 ];then
	    result="1"
	    if [ "$(groups "$PCUSER" | grep -c -E "( root$)|( root )|( sudo$)|( sudo )")" -eq 1 ];then
		#si l'utilisateur fait partie d'un groupe d'administration de la machine on l'ajoute sans filtrage par défaut.
		echo "+$PCUSER" >> $FILE_tmp
	    else
		#si non avec filtrage  par défaut.
		echo "#$PCUSER" >> $FILE_tmp
	    fi
	fi

	if [ "$(groups "$PCUSER" | grep -c -E "( root$)|( root )|( sudo$)|( sudo )")" -eq 0 ];then
	    $SED "s/^+${PCUSER}$/#$PCUSER/g" "$FILE_tmp"
	else
	    $SED "s/^#${PCUSER}$/+$PCUSER/g" "$FILE_tmp"
	    $SED "s/^$${PCUSER}$/+$PCUSER/g" "$FILE_tmp"
	fi
     done

     ## on supprime tout ceux qui n'existent plus sur le pc.
     while read PCUSER
     do
	PCUSER=${PCUSER//#/}
	PCUSER=${PCUSER//+/}
	groups $PCUSER > /dev/null
	if [ $? -eq 1 ];then
	    result="1"
	    $SED "/^$${PCUSER}$/d" "$FILE_tmp"
	    $SED "/^#${PCUSER}$/d" "$FILE_tmp"
	    $SED "/^+${PCUSER}$/d" "$FILE_tmp"
	fi
	if [ ! -d $(getent passwd $PCUSER | cut -d":" -f6) ]; then
	    result="1"
	    $SED "/^$${PCUSER}$/d" "$FILE_tmp"
	    $SED "/^#${PCUSER}$/d" "$FILE_tmp"
	    $SED "/^+${PCUSER}$/d" "$FILE_tmp"
	fi
     done < $FILE_tmp
     echo $result
     cp -f "$FILE_tmp" "$FILE_GCTOFFCONF"
     rm -f $FILE_tmp
     $UMFILEtmp
}

applistegctoff() {
     echo "<applistegctoff>"
     $ADDUSERTOGROUP root ctoff 2> /dev/null
     while read PCUSER
     do
	if [ "$(echo "$PCUSER" | grep -c -v "#")" -eq 1 ];then
	    $ADDUSERTOGROUP "$PCUSER" ctoff 2> /dev/null
	else
	    $DELUSERTOGROUP "${PCUSER//#/}" ctoff 2> /dev/null
	fi
     done < "$FILE_GCTOFFCONF"
     echo "</applistegctoff>"
}

activegourpectoff() {
     echo "<activegourpectoff>"
     groupadd ctoff
     $SED "s?^GCTOFF.*?GCTOFF=ON?g" $FILE_CONF
     updatelistgctoff
     applistegctoff
     USERHTTPD=$( grep /var/www /etc/passwd | cut -d":" -f1)
     GROUPHTTPD=$( grep "$USERHTTPD" /etc/group | cut -d":" -f1)
     chown root:"$GROUPHTTPD" "$FILE_GCTOFFCONF"
     chmod 660 "$FILE_GCTOFFCONF"
     $CRONrestart
     echo "</activegourpectoff>"
}

desactivegourpectoff() {
     groupdel ctoff 2> /dev/null
     $SED "s?^GCTOFF.*?GCTOFF=OFF?g" $FILE_CONF
}

uninstall() {
     $SED "/.ct.local/d" /etc/hosts

     # On force la désinstall par dpkg ou rpm si l'install a été effectuée par un package.
     if [ $nomanuel -eq 0 ]; then
	muninstall=$(gettext "Install by package was detected, please use this command to uninstall ctparental.")
	if [ "$(dpkg -l ctparental | grep -c ^i)" -eq 1 ] ;then
	    echo "$muninstall"
	    echo "$CMDREMOVE ctparental"
	    exit 0
	fi
	if [ "$(rpm -q -a | grep -c ctparental )" -eq 1 ] ;then
	    echo "$muninstall"
	    echo "$CMDREMOVE ctparental"
	    exit 0
	fi
     fi
     if [ -f /etc/sysconfig/network-scripts/ifcfg-lo1 ] ;then
	rm -f /etc/sysconfig/network-scripts/ifcfg-lo1
     fi

     if [ -f /etc/sysconfig/network-scripts/ifcfg-lo2 ] ;then
	rm -f /etc/sysconfig/network-scripts/ifcfg-lo2
     fi

     if [ -f /etc/network/interfaces.d/ctparentallo ];then
	rm -f /etc/network/interfaces.d/ctparentallo
     fi
     $NETWORKINGrestart
     $SED "s?.*IPRULES=.*?IPRULES=OFF?g" $FILE_CONF
     rm -f "$FILEIPTABLES"
     rm -f "$FILEIPBLACKLIST"
     rm -f "$FILEIPTIMEWEB"
     rm -f $RSYSLOGCTPARENTAL
     $RSYSLOGRESTART
     desactivegourpectoff
     autoupdateoff
     dnsmasqoff
     resolvconffixoff
     FILTRAGEISOFF=1
     iptablesreload
     $LIGHTTPDstop
     $DNSMASQstop
     if [ $nomanuel -eq 1 ]; then
	# en install par le deb on n'efface pas les fichiers installés par celui-ci
	rm -f /etc/cron.d/CTparental*
	rm -rf "$DIRHTML"
	cd "$DIR_CONF"
	for file in *
	do
	    if [ ! "$(echo "$file" | grep -c -E ".*.conf")" -ge 1 ] ;then
		rm -rf ${DIR_CONF:?}/"$file"
	    fi
	done
     else
	rm -f /etc/cron.d/CTparental*
	rm -rf "$DIRadminHTML"
	rm -rf "$DIRHTML"
	rm -rf "$DIR_SHARE"
	rm -rf "$DIR_CONF"
     fi

     rm -rf "$tempDIR"
     rm -rf /usr/share/lighttpd/*
     rm -f "$CTPARENTALCONFHTTPD"
     if [ -f /etc/NetworkManager/NetworkManager.conf ];then
	$SED "s/^#dns=dnsmasq/dns=dnsmasq/g" /etc/NetworkManager/NetworkManager.conf
	$NWMANAGERrestart
  	sleep 5
     fi

     if [ $noinstalldep -eq 0 ]; then
	for PACKAGECT in $DEPENDANCES
	do
	    $CMDREMOVE "$PACKAGECT" 2> /dev/null
	done
     fi

     # désactivation du module ip_conntrack_ftp
     if [ "$(grep -c ip_conntrack_ftp "$FILEMODULESLOAD" )" -ge "1" ] ; then
	$SED "s?.*ip_conntrack_ftp.*?#ip_conntrack_ftp?g" "$FILEMODULESLOAD"
     else
	echo "#ip_conntrack_ftp" >> "$FILEMODULESLOAD"
     fi
     modprobe -r ip_conntrack_ftp
     $SED "s?.*ip_conntrack_ftp.*?#ip_conntrack_ftp?g" "$FILEMODULESLOAD"

     rm -f "$PEMSRVDIR"/ct.local.pem
     rm -f "$PEMSRVDIR"/duckduckgo.pem
     rm -f "$PEMSRVDIR"/qwant.pem
     rm -f "$PEMSRVDIR"/search.yahoo.com.pem
     rm -f "$CADIR"/cactparental.crt
     rm -f "$DIRHTML"/cactparental.crt
     rm -f "$REPCAMOZ"/cactparental.crt
     $UPDATECASYSTEM
     for user in $(listeusers) ; do
	HOMEPCUSER=$(getent passwd "$user" | cut -d ':' -f6)
	for cert8db in $(find $HOMEPCUSER/ -name "cert8.db"  | grep -v Trash )
	do
	    cert8dbdir=$(dirname ${cert8db});
	    # on supprime tous les anciens certificats
	    while true
	    do
		certutil -D -d "$cert8dbdir"/ -n"CActparental - ctparental" 2&> /dev/null
		if [ ! $? -eq 0 ];then
		    break
		fi
	    done
	done
	for cert9db in $(find $HOMEPCUSER/ -name "cert9.db" | grep -v Trash)
	do
	    cert9dbdir=$(dirname ${cert9db});
	    # on supprime tous les anciens certificats
	    while true
	    do
		certutil -D -d sql:"$cert9dbdir"/ -n"CActparental - ctparental" 2&> /dev/null
		if [ ! $? -eq 0 ];then
		    break
		fi
	    done
	done
     done
     #unsetproxy
     # on réouvre l'ipv6
     $IPTABLES6 -F
     $IPTABLES6 -X
     $IPTABLES6 -t nat -F
     $IPTABLES6 -t nat -X
     $IPTABLES6 -P INPUT ACCEPT
     $IPTABLES6 -P OUTPUT ACCEPT
     $IPTABLES6 -P FORWARD ACCEPT
     # Save configuration so that it survives a reboot
     if [ "$IPTABLESsaveFILE" = "" ] ;then
	$IPTABLESsave
     else
	$IPTABLESsave > "$IPTABLESsaveFILE"
     fi
}

choiblenabled() {
     echo -n > $CATEGORIES_ENABLED
     clear
     gettext 'Do you want to filter by Blacklist or Whitelist B/W:'
     while true; do
         read choiBW
         case $choiBW in
             B | b )
		cat_av="$BL_CATEGORIES_AVAILABLE"
		break
		;;
	    W | w )
		cat_av="$WL_CATEGORIES_AVAILABLE"
		break
		;;
	esac
     done

     cat  < $cat_av | while read CATEGORIE
     do
	clear
	gettext 'Choice of filtered categories to apply.'
	echo ""
	eval_gettext "Do you want to enable this category \$CATEGORIE  O/N:"
	(
	    while true ; do
		unset choi
		read choi
		case $choi in
		    O | o )
			echo "OUI"
			echo "$CATEGORIE" >> "$CATEGORIES_ENABLED"
			break
			;;
		    N | n )
			break
			;;
		esac
	    done
	) < /dev/tty
     done
}

errortime1() {
     clear
     at=$(gettext "at")
     and=$(gettext "and")
     h=$(gettext ":")
     or=$(gettext "or")
     echo -e "$(gettext "The start time must be strictly less than the end time:")$RougeD$input$Fcolor "
     echo "exemple: 00${h}00 $at 23${h}59 $or 08${h}00 $at 12${h}00 $and 14${h}00 $at 16${h}50"
     echo -e -n "$RougeD$PCUSER$Fcolor $(gettext "is allowed to connect the") $BleuD${DAYS[$NumDAY]}$Fcolor $(gettext "at:")"
}

errortime2() {
     clear
     at=$(gettext "at")
     and=$(gettext "and")
     h=$(gettext ":")
     or=$(gettext "or")
     echo -e "$(gettext "Bad syntax:")$RougeD$input$Fcolor "
     echo "exemple: 00${h}00 $at 23${h}59 $or 08${h}00 $at 12${h}00 $and 14${h}00 $at 16${h}50"
     echo -e -n "$RougeD$PCUSER$Fcolor $(gettext "is allowed to connect the") $BleuD${DAYS[$NumDAY]}$Fcolor $(gettext "at:")"
}

timecronalert() {
     MinAlert=${1} # temps en minute entre l'alerte et l'action
     H=$((10#${2}))
     M=$((10#${3}))
     D=$((10#${4}))
     Numday=${Numday:=1}
     MinTotalAlert="$((H*60+M-MinAlert))"
     if [ $(( MinTotalAlert < 0 )) -eq 1 ]
     then
	if [ "$Numday" -eq 0 ] ; then
	    D=6
	else
	    D=$(( D -1 ))
	fi
	MinTotalAlert="$(( $((H + 24)) * 60 + M - MinAlert))"
     fi
     Halert=$((MinTotalAlert/60))
     MAlert=$((MinTotalAlert - $(( Halert *60 )) ))
     echo "$MAlert $Halert * * ${DAYSCRON[$D]}"
}

updatetimelogin() {
    if [ ! -f $FILEIPTIMEWEB ]; then touch $FILEIPTIMEWEB; fi
    USERSCONECT=$(who | awk '//{print $1}' | sort -u)
    if [ "$( grep -c "$(date +%D)" $FILE_HCOMPT )" -eq 1 ] ; then
	# on incrémente le compteur de temps de connection. Pour
	# chaque utilisateur connecté
	for PCUSER in $USERSCONECT
	do
	    if [ "$( grep -c "^$PCUSER=user=" $FILE_HCONF )" -eq 1 ] ;then
		if [ "$( grep -c "^$PCUSER=" $FILE_HCOMPT )" -eq 0 ] ;then
		    echo "$PCUSER=1=1" >> $FILE_HCOMPT
		else
		    var=$(($( grep "^$PCUSER=" $FILE_HCOMPT | cut -d"=" -f2 ) + 1 ))
		    uidpcuser=$(id -u $PCUSER)
		    if [ "$(ss -t -e -o state established | grep -c uid:$uidpcuser)" -ge 1 ];then
			varweb=$(($( grep "^$PCUSER=" $FILE_HCOMPT | cut -d"=" -f3 ) + 1 ))
		    else
			varweb=$( grep "^$PCUSER=" $FILE_HCOMPT | cut -d"=" -f3)
		    fi
		    $SED "s?^$PCUSER=.*?$PCUSER=$var=$varweb?g" $FILE_HCOMPT
		    count=$(($( grep "^$PCUSER=user=" $FILE_HCONF | cut -d "=" -f3 ) - var ))
		    countweb=$(($( grep "^$PCUSER=user=" $FILE_HCONF | cut -d "=" -f4 ) - varweb ))
		    # si le compteur de l'usager dépasse la valeur max
		    # autorisée on verrouille le compte et on
		    # déconnecte l'utilisateur.
		    if [ $count -le 0 ];then
			/usr/bin/skill -KILL -u"$PCUSER"
			passwd -l "$PCUSER"
		    else
			# On alerte l'usager que son quota temps
			# session arrive à expiration 5-4-3-2-1
			# minutes avant.
			if [ $count -le "$TIMERALERT" ];then
			    HOMEPCUSER=$(getent passwd "$PCUSER" | cut -d ':' -f6)
			    export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u "$PCUSER"  /usr/bin/notify-send -u critical "CTparental" "$(eval_gettext "Logout in \$count minutes") "
			fi
		    fi

		    if [ "$countweb" -le 0 ];then
			if [ "$( grep -c "$PCUSER" $FILEIPTIMEWEB )" -eq 0 ];then
			    # on bloque l'accès direct , via dansguardian et via le proxy
			    echo "$IPTABLES -A OUTPUT ! -d 127.0.0.1/8 -m owner --uid-owner $PCUSER -j REJECT" >> "$FILEIPTIMEWEB"
			    echo "$IPTABLES -A OUTPUT -d 127.0.0.1/8 -m owner --uid-owner $PCUSER -p tcp --dport $E2GUport -j REJECT" >> "$FILEIPTIMEWEB"
			    echo "$IPTABLES -A OUTPUT -d 127.0.0.1/8 -m owner --uid-owner $PCUSER -p tcp --dport $PROXYport -j REJECT" >> "$FILEIPTIMEWEB"
			    iptablesreload
			    HOMEPCUSER=$(getent passwd "$PCUSER" | cut -d ':' -f6)
			    export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u "$PCUSER"  /usr/bin/notify-send -u critical "CTparental" "$(gettext 'Your surf time has expired!')"
			fi
		    else
			if [ "$( grep -c "$PCUSER" $FILEIPTIMEWEB )" -ge 1 ];then
			    $SED "/$PCUSER/d" $FILEIPTIMEWEB
			    iptablesreload
			fi
			# On alerte l'usager que son quota temps web
			# arrive à expiration 5-4-3-2-1 minutes avant.
			if [ $countweb -le "$TIMERALERT" ];then
			    HOMEPCUSER=$(getent passwd "$PCUSER" | cut -d ':' -f6)
			    export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u "$PCUSER"  /usr/bin/notify-send -u critical "CTparental" "$(eval_gettext "Your remaining navigation time is \$countweb minutes") "
			fi
		    fi
		fi
	    else
		# on efface les lignes relatives à cet utilisateur
		if [ "$( grep -c "$PCUSER" $FILEIPTIMEWEB )" -ge 1 ];then
		    $SED "/$PCUSER/d" $FILEIPTIMEWEB
		    iptablesreload
		fi
		$SED "/^$PCUSER=/d" $FILE_HCOMPT
	    fi
	done
     else
	 # on réactive tous les comptes
	 for PCUSER in $(listeusers)
	 do
	     passwd -u "$PCUSER"
	 done
	 # on remet tous les compteurs à zéro.
	 echo "date=$(date +%D)" > $FILE_HCOMPT
	 echo > $FILEIPTIMEWEB
	 iptablesreload
    fi
}

requiredpamtime() {
     TESTGESTIONNAIRE=0
     if [ ! -f $DIRPAM$COMMONFILEGS ] ; then
	for FILE in $GESTIONNAIREDESESSIONS
	do
	    if [ -f "$DIRPAM""$FILE" ];then
		if [ "$( grep -c "^account required pam_time.so" "$DIRPAM$FILE" )" -eq 0  ] ; then
		    $SED "1i account required pam_time.so"  "$DIRPAM$FILE"
		fi
		TESTGESTIONNAIRE=1
	    fi
	done
	if [ $TESTGESTIONNAIRE -eq 0 ] ; then
	    gettext 'No known session manager has been detected.'
	    gettext 'so it is impossible to activate the time control connections'
	    desactivetimelogin
	    exit 1
	fi
     else
	if [ "$( grep -c "^account required pam_time.so" "$DIRPAM$COMMONFILEGS")" -eq 0  ] ; then
	    $SED "1i account required pam_time.so"  $DIRPAM$COMMONFILEGS
	fi
     fi

     if [ ! -f $FILEPAMTIMECONF.old ] ; then
	cp $FILEPAMTIMECONF $FILEPAMTIMECONF.old
     fi
     echo "*;*;root;Al0000-2400" > $FILEPAMTIMECONF
}

activetimelogin() {
    requiredpamtime
    for NumDAY in 0 1 2 3 4 5 6
    do
	{ echo "PATH=$PATH" ; echo "LANG=$LANG" ; } > /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
    done
    for PCUSER in $(listeusers)
    do
	HOMEPCUSER=$(getent passwd "$PCUSER" | cut -d ':' -f6)
	$SED "/^$PCUSER=/d" $FILE_HCONF
	eval_gettext "\$PCUSER is allowed to connect 7/7 24/24 O/N?"
	choi=""
	while true; do
	    read choi
            case $choi in
		O | o )
		    alltime="O"
		    echo "$PCUSER=admin=" >> $FILE_HCONF
   		    break
		    ;;
		N| n )
		    alltime="N"
		    clear
		    eval_gettext "\$PCUSER is allowed to connect X minutes per day
X (1 a 1440) = "
		    while true; do
			read choi
			if [ "$choi" -ge 1 ];then
			    if [ "$choi" -le 1440 ];then
				timesession=$choi
				break
			    fi
			fi
			gettext "X must take a value between 1 and 1440
"
		    done
		    clear
		    eval_gettext "\$PCUSER is allowed to surf the Internet X minutes per day
X ( 1 a \$timesession )= "
		    while true; do
			read choi
			if [ "$choi" -ge 1 ];then
			    if [ "$choi" -le "$timesession" ];then
				timeweb=$choi
				break
			    fi
			fi
			eval_gettext "X must take a value between 1 and $timesession
"
		    done
		    echo "$PCUSER=user=$timesession=$timeweb" >> $FILE_HCONF
		    break
		    ;;
	    esac
	done

	for NumDAY in 0 1 2 3 4 5 6
	do
	    if [ $alltime = "O" ];then
		break
	    fi

            clear
            at=$(gettext "at")
            and=$(gettext "and")
            h=$(gettext ":")
            or=$(gettext "or")
            echo "exemple: 00${h}00 $at 23${h}59 $or 08${h}00 $at 12${h}00 $and 14${h}00 $at 16${h}50"
            echo -e -n "$RougeD$PCUSER$Fcolor $(gettext "is allowed to connect the") $BleuD${DAYS[$NumDAY]}$Fcolor $(gettext "at:")"
            while true; do
		read choi
		input=$choi
		# mise en forme de la variable choi pour pam
		choi=$(echo "$choi" | sed -e "s/$h//g" | sed -e "s/ //g" | sed -e "s/$at/-/g" | sed -e "s/$and/:/g" )
		if [ "$( echo "$choi" | grep -E -c "^([0-1][0-9]|2[0-3])[0-5][0-9]-([0-1][0-9]|2[0-3])[0-5][0-9]$|^([0-1][0-9]|2[0-3])[0-5][0-9]-([0-1][0-9]|2[0-3])[0-5][0-9]:([0-1][0-9]|2[0-3])[0-5][0-9]-([0-1][0-9]|2[0-3])[0-5][0-9]$" )" -eq 1 ];then
                    int1=$(echo "$choi" | cut -d ":" -f1 | cut -d "-" -f1)
                    int2=$(echo "$choi" | cut -d ":" -f1 | cut -d "-" -f2)
                    int3=$(echo "$choi" | cut -d ":" -f2 | cut -d "-" -f1)
                    int4=$(echo "$choi" | cut -d ":" -f2 | cut -d "-" -f2)
                    if [ "$int1" -lt "$int2" ];then
			if [ ! "$(echo "$choi" | grep -E -c ":")" -eq 1 ] ; then
                            if [ "$NumDAY" -eq 6 ] ; then
				HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$int1-$int2"
                            else
				HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$int1-$int2|"
                            fi
                            m1=${int1:2:4}
                            h1=${int1:0:2}
                            m2=${int2:2:4}
                            h2=${int2:0:2}
			    echo "$PCUSER=$NumDAY=$h1${h}h$m1:$h2${h}h$m2" >> "$FILE_HCONF"
                            echo "$m2 $h2 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
			    for ((count=1 ; TIMERALERT + 1 - count ; count++))
			    do
				echo "$(timecronalert "$count" "$h2" "$m2" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
			    done
                            break
			else
                            if [ "$int2" -lt "$int3" ];then
				if [ "$int3" -lt "$int4" ];then
				    if [ "$NumDAY" -eq 6 ] ; then
					HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$int1-$int2|${DAYSPAM[$NumDAY]}$int3-$int4"
				    else
					HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$int1-$int2|${DAYSPAM[$NumDAY]}$int3-$int4|"
				    fi
				    m1=${int1:2:4}
				    h1=${int1:0:2}
				    m2=${int2:2:4}
				    h2=${int2:0:2}
				    m3=${int3:2:4}
				    h3=${int3:0:2}
				    m4=${int4:2:4}
				    h4=${int4:0:2}
				    ## minutes heures jourdumois mois jourdelasemaine utilisateur  commande
				    echo "$PCUSER=$NumDAY=$h1${h}h$m1:$h2${h}h$m2:$h3${h}h$m3:$h4${h}h$m4" >> "$FILE_HCONF"
				    echo "$m2 $h2 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
				    echo "$m4 $h4 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
				    for ((count=1 ; TIMERALERT + 1 - count ; count++))
				    do
					echo "$(timecronalert "$count" "$h2" "$m2" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
					echo "$(timecronalert "$count" "$h4" "$m4" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
				    done
				    break
				else
				    errortime1
				fi
                            else
				errortime1
                            fi
			fi
                    else
			errortime1
                    fi
		else
                    errortime2
		fi
            done
        done
     	if [ $alltime = "N" ] ; then
	    echo "*;*;$PCUSER;$HORAIRESPAM" >> $FILEPAMTIMECONF
	else
	    echo "*;*;$PCUSER;Al0000-2400" >> $FILEPAMTIMECONF
	fi
    done

    for NumDAY in 0 1 2 3 4 5 6
    do
	echo >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
    done
    echo >> $FILE_HCONF
    $SED "s?^HOURSCONNECT.*?HOURSCONNECT=ON?g" $FILE_CONF
    $CRONrestart
}

desactivetimelogin() {
    echo "<desactivetimelogin>"
    for FILE in $GESTIONNAIREDESESSIONS
    do
	$SED "/account required pam_time.so/d" "$DIRPAM""$FILE" 2> /dev/null
    done
    $SED "/account required pam_time.so/d" "$DIRPAM""$COMMONFILEGS" 2> /dev/null

    cat $FILEPAMTIMECONF.old > $FILEPAMTIMECONF
    for NumDAY in 0 1 2 3 4 5 6
    do
	rm -f /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
    done
    $SED "s?^HOURSCONNECT.*?HOURSCONNECT=OFF?g" $FILE_CONF
    for PCUSER in $(listeusers)
    do
	passwd -u "$PCUSER" > /dev/null
    done
    # on remet tous les compteurs à zéro.
    echo "date=$(date +%D)" > $FILE_HCOMPT
    echo > $FILE_HCONF
    $CRONrestart
    echo > $FILEIPTIMEWEB
    iptablesreload
    echo "</desactivetimelogin>"
}

listeusers() {
    for LIGNES in $(getent passwd | cut -d":" -f1,3,6)
    do
	#echo $(echo $LIGNES | cut -d":" -f2)
	if [ "$(echo "$LIGNES" | cut -d":" -f2)" -ge "$UIDMINUSER" ] ;then
	    if [ -d "$( echo "$LIGNES" | cut -d":" -f3 )" ] ;then
		echo "$LIGNES" | cut -d":" -f1
	    fi
	fi
    done
}

readTimeFILECONF() {
    requiredpamtime
    for NumDAY in 0 1 2 3 4 5 6
    do
	{ echo "PATH=$PATH" ; echo "LANG=$LANG" ; }  > /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
    done

    for PCUSER in $(listeusers)
    do
	HOMEPCUSER=$(getent passwd "$PCUSER" | cut -d ':' -f6)
	HORAIRESPAM=""
  	userisconfigured="0"

	while read line
	do

	    if [ "$( echo "$line" | grep -E -c "^$PCUSER=[0-6]=" )" -eq 1 ] ; then
		echo "$line"
		NumDAY=$(echo "$line" | cut -d"=" -f2)
		h1=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f1 | cut -d"h" -f1)
		m1=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f1 | cut -d"h" -f2)
		h2=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f2 | cut -d"h" -f1)
		m2=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f2 | cut -d"h" -f2)
		h3=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f3 | cut -d"h" -f1)
		m3=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f3 | cut -d"h" -f2)
		h4=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f4 | cut -d"h" -f1)
		m4=$(echo "$line" | cut -d"=" -f3 | cut -d":" -f4 | cut -d"h" -f2)
		if [ "$(echo -n "$h3""$m3" | wc -c)" -gt 2 ]; then
 		    if [ "$NumDAY" -eq 6 ] ; then
		        HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$h1$m1-$h2$m2|${DAYSPAM[$NumDAY]}$h3$m3-$h4$m4"

		    else
		        HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$h1$m1-$h2$m2|${DAYSPAM[$NumDAY]}$h3$m3-$h4$m4|"
		    fi
		    echo "$m2 $h2 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
		    echo "$m4 $h4 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
		    for ((count=1 ; TIMERALERT + 1 - count ; count++))
		    do
			echo "$(timecronalert "$count" "$h2" "$m2" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
			echo "$(timecronalert "$count" "$h4" "$m4" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
			userisconfigured="1"
		    done

		else
		    if [ "$NumDAY" -eq 6 ] ; then
			HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$h1$m1-$h2$m2"
		    else
			HORAIRESPAM="$HORAIRESPAM${DAYSPAM[$NumDAY]}$h1$m1-$h2$m2|"
		    fi
		    for ((count=1 ; TIMERALERT + 1 - count ; count++))
		    do
			echo "$(timecronalert "$count" "$h2" "$m2" "$NumDAY" ) root export HOME=$HOMEPCUSER && export DISPLAY=:0.0 && export XAUTHORITY=$HOMEPCUSER/.Xauthority && sudo -u $PCUSER  /usr/bin/notify-send -u critical \"CTparental\" \"$(eval_gettext "Logout in \$count minutes")\" " >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"
		    done
		    echo "$m2 $h2 * * ${DAYSCRON[$NumDAY]} root /usr/bin/skill -KILL -u$PCUSER" >> /etc/cron.d/CTparental"${DAYS[$NumDAY]}"

		    userisconfigured="1"
		fi
	    fi
	done < $FILE_HCONF
	if [ $userisconfigured -eq 1 ] ; then
	    echo "*;*;$PCUSER;$HORAIRESPAM" >> $FILEPAMTIMECONF
	else
	    echo "*;*;$PCUSER;Al0000-2400" >> $FILEPAMTIMECONF
	    $SED "/^$PCUSER=/d" $FILE_HCOMPT
	    passwd -u "$PCUSER"
	fi
    done
    $SED "s?^HOURSCONNECT.*?HOURSCONNECT=ON?g" $FILE_CONF
    $CRONrestart
}

confgrub2() {
    PTNlogin='^[a-zA-Z]*$'
    ##Passage en keymap us pour le password comme ça quel que soit
    ##votre clavier le mot de passe correspond bien aux touches
    ##frappées. Ce qui évite de se prendre la tête pour le clavier
    ##avec le mot de passe grub.

    #apt-get install console-data
    layout1="$( grep "XKBLAYOUT" /etc/default/keyboard  | awk -F "\"" '{print $2}' | awk -F "," '{print $1}')"
    setxkbmap us
    loadkeys us
    clear
    gettext 'keymap is in qwerty us in grub menu.
    - Only letters or numbers.
    - 4 characters minimum.
Enter login to the superuser of grub2 :'
    while true; do
	read logingrub
	if [ "$(expr "$logingrub" : "$PTNlogin")" -gt 4  ];then
            break
	else
            clear
	    gettext 'keymap is in qwerty us in grub menu.
    - Only letters or numbers.
    - 4 characters minimum.
Enter login to the superuser of grub2 :'
	fi
    done
    echo > /tmp/passgrub
    while [ "$(awk '{print $NF}' /tmp/passgrub | grep -c grub.)" -eq 0 ];do
	$NEWPASSGRUB2 | tee /tmp/passgrub
    done
    passwordgrub=$(awk '{print $NF}' /tmp/passgrub | grep grub.)
    ##on rebascule sur la keymap system
    setxkbmap "$layout1"
    loadkeys "$layout1"
    vide=""
    cat << EOF > /etc/grub.d/99_password
#!/bin/sh
## ce script doit être lancé en dernier !!!
## on restreint uniquement les menus de "setup uefi" , " recovery mode "
## ainsi que tous les submenu.
## seul les menuentry et submenu de premier niveau prennent en compte les paramètres d’accès utilisateurs.
## ce qui implique que l'ajout de --unrestricted a un submenu est récursif  !!
cat << ${vide}EOF
set superusers="$logingrub"
password_pbkdf2 $logingrub $passwordgrub
${vide}EOF
confunrestricted() {
        ## fonction lancée en tache de fond par la commande
        ## confunrestricted &
        ## elle attend la fin de l’exécution de tous les scripts  update grub
        ## puis modifie le fichier $BOOTREPGRUB2/grub.cfg pour y ajouter le droits a tout le monde
        cd /etc/grub.d/
        for file in *
        do
        if [ "\$(echo "\$file" | grep -E -c "[0-9][0-9]_")" -eq 1 ];then
            if [ -z "\$processupdategrub" ] ; then
                processupdategrub=\$file
            else
                processupdategrub=\$processupdategrub","\$file
            fi
        fi
        done
        while [ "\$(ps -C "\$processupdategrub" -o pid= | wc -l)" -gt 2 ]
        do
            sleep 0.2
        done
        cp $BOOTREPGRUB2/grub.cfg /tmp/grub.cfg.new
        while read linecfg
        do
            if [ "\$(echo "\$linecfg" | grep -E "menuentry " | grep -v "uefi-firmware" | grep -c -v "recovery mode" )" -eq 1 ];then
                line2=\$(echo "\$linecfg" | sed -e 's/ {/ --unrestricted { /g')
                sed -i "s|\$linecfg|\$line2|" $BOOTREPGRUB2/grub.cfg
            fi
        done < /tmp/grub.cfg.new
        rm /tmp/grub.cfg.new
    }
confunrestricted &
EOF
    chmod 755 /etc/grub.d/99_password
    update-grub2
}

exportconf() {
    if [ ! -e "$FILEIPTABLES" ] ;  then
	echo > "$FILEIPTABLES"
    fi
    if [ ! -e "$FILEIPBLACKLIST" ] ;  then
	echo > "$FILEIPBLACKLIST"
    fi
    date="$( date +%y.%m.%d )"
    FILEexpconf=$(echo "$DIRexpconf"/CTparental.conf."$date".tar.gz | sed -e "s|\/\{2,10\}|\/|g" )
    tar -cvzf "$FILEexpconf" "$DIR_CONF"/wl-categories-available "$DIR_CONF"/categories-enabled.conf \
	"$DIR_CONF"/CThourscompteur "$DIR_CONF"/CTsafe.conf "$DIR_CONF"/blacklist-local.conf "$DIR_CONF"/bl-categories-available \
	"$DIR_CONF"/CThours.conf  "$DIR_CONF"/dnsfilter-available/ "$DIR_CONF"/CTparental.conf "$DIR_CONF"/domaine-rehabiliter.conf \
	"$DIR_CONF"/GCToff.conf "$PRIVOXYCONF" "$PRIVOXYUSERA" "$PRIVOXYCTA" \
	"$DIRE2G"lists/bannedmimetypelist "$DIRE2G"lists/bannedextensionlist "$DIRE2G"lists/bannedsitelist \
	"$FILEIPTABLES" "$FILEIPBLACKLIST"

    chmod 744 "$DIRexpconf"/CTparental.conf."$date".tar.gz
    eval_gettext "Conf exported to \$FILEexpconf
"
}

importconf() {
     # si l'archive contient bien la bonne liste de fichiers.
     dirtar=$(echo "$DIR_CONF" | sed -e "s/\///1")
     if [ "$(tar -tf "$FILEimpconf" | grep -c $dirtar/CTparental.conf )" -eq 1 ] ;then

	 tar -xvzf "$FILEimpconf" -C /
	 $SED "s?^MD5DREAB.*?MD5DREAB=old?g" $FILE_CONF
	 FILTRAGEISOFF="$( grep -c "DNSMASQ=OFF" $FILE_CONF )"
	 if [ ! "$FILTRAGEISOFF" -eq 1 ];then
	     adapt
	     catChoice
	     dnsmasqon
	 else
	     rm -f /etc/cron.d/CTparental*
	     desactivegourpectoff
	     autoupdateoff
	     dnsmasqoff
	     FILTRAGEISOFF=1
	 fi
	 if [ "$( grep -c GCTOFF=ON $FILE_CONF )" -eq 1 ];then
	     activegourpectoff
	 else
	     desactivegourpectoff
	 fi
	 if [ "$( grep -c HOURSCONNECT=ON $FILE_CONF )" -eq 1 ];then
	     readTimeFILECONF
	 else
	     desactivetimelogin
	 fi

	 iptablesreload
     else
	 eval_gettext "\$FILEimpconf is not a configuration file
"
     fi
}

# and func # ne pas effacer cette ligne !!

usage="$(gettext "Use"): CTparental    {-i }|{ -u }|{ -dl }|{ -ubl }|{ -rl }|{ -on }|{ -off }|{ -cble }|{ -dble }
		     |{ -tlo }|{ -tlu }|{ -uhtml }|{ -aupon }|{ -aupoff }|{ -aup }
-i$(gettext "	    => Install parental control on the computer (desktop PC). Can be used with
	      an additional parameter to specify a source path for the redirection page.
	      example: CTparental -dirhtml -i /home/toto/html/
	      if no option a default page is used.")
-u$(gettext "	    => uninstall the Parental Control Computer (desktop PC)")
-dl$(gettext "	    => updates parental control from the blacklist of the University of Toulouse")
-ubl$(eval_gettext "	    => To be done after each change of the file \$DNS_FILTER_OSSI")
-rl$(eval_gettext "	    => To be done after each change of the file \$DREAB")
-on$(gettext "	    => Enable parental control")
-off$(gettext "	    => Disable parental control")
-cble$(gettext "	    => Set the filter mode by whitelist or blacklist (default)
	      and the categories that you want to activate.")
-dble$(gettext "	    => Reset the default active categories and blacklist filtering.")
-tlo$(gettext "	    => Enable and configure the login time restrictions for users.")
-tlu$(gettext "	    => Disable the login time restrictions for users.")
-uhtml$(gettext "	    => updates the redirect page from a source directory or default.
	      examples:
	              - With a source directory: CTparental -uhtml -dirhtml /home/toto/html/
	              - Default: CTparental -uhtml
	      also lets you change the login couple password of the web interface.")
-aupon$(gettext "	    => Enable the automatic update of the Toulouse blacklist (every 7 days).")
-aupoff$(gettext "	    => Disable the automatic update of the Toulouse blacklist.")
-aup$(gettext "	    => as -dl but only if there is no update for more than 7 days.")
-nodep$(gettext "	    => if placed after -i or -u allows not install / uninstall the dependencies, useful if
	      we prefer to install them by hand, or for the postinst and prerm script of deb.
	      examples:
	              CTparental -i -nodep
	              CTparental -dirhtml -i /home/toto/html/ -nodep
	              CTparental -u -nodep")
-nomanuel$(gettext "   => used only for the postinst and prerm script.")
-gcton$(eval_gettext "	    => Enable a group of privileged users that will not undergo filtering.
	      exemples:
	              CTparental -gctulist
	              Comment all users that you want to filter in \$FILE_GCTOFFCONF
	              CTparental -gctalist")
-gctoff$(gettext "	    => Disable privileged group.")
	      $(gettext "all users of the system undergo the filtering!")
-gctapl$(eval_gettext "	    => Add / Delete users in the ctoff group based on the config file, \$FILE_GCTOFFCONF")
-ipton$(gettext "	    => Enable rules of custom firewall.")
-iptoff$(gettext "	    => Disable rules of custom firewall.")
-grubPon$(gettext "    => Enable the superuser of grub2.")
-grubPoff$(gettext "   => Disable the superuser of grub2.")
-pfoff$(gettext "	    => Disable default rules privoxy.")
-pfon$(gettext "	    => Enable default rules privoxy. (default is Enable)")
-ron$(gettext "	    => Enable redirect page.")
-roff$(gettext "	    => Disabled redirect page.")
-exp$(gettext "	    => Export configuration.
	      exemple:
	              CTparental -exp /home/myhomedir/")
-imp$(gettext "	    => Import a configuration.
	      exemple:
	              CTparental -imp /home/myhomedir/CTparental.conf.yy.mm.dd.tar.gz")
-logdnson$(gettext "   => For debugging only.
	      Enabling dnsmasq query log in the /var/log/dnsmasq.query.log file.")
-logdnsoff$(gettext "  => To disable dnsmasq query log in /var/log/dnsmasq.query.log .")
-setadmin$(gettext "    => To change the login couple password.")
"

arg1=${1}
case $arg1 in
	-\? | -h* | --h*)
		echo "$usage"
	;;
	-i )
		networkisoknext
		install
	;;
	-u )
	    uninstall
	;;
	-dl )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			download
			adapt
			catChoice
			dnsmasqon
			$SED "s?^LASTUPDATE.*?LASTUPDATE=$THISDAYS=$(date +%d-%m-%Y\ %T)?g" $FILE_CONF
		fi
	;;
	-ubl )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			adapt
			catChoice
			dnsmasqon
		fi
	;;
	-uhtml )
		networkisoknext
		FoncHTTPDCONF
	;;
	-rl )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			catChoice
			dnsmasqon
		fi
	;;
	-on )
		networkisoknext
		FILTRAGEISOFF=0
		dnsmasqon
		iptablesreload
		activegourpectoff
	;;
	-off )
		desactivegourpectoff
		autoupdateoff
		dnsmasqoff
		FILTRAGEISOFF=1
		iptablesreload
	;;
	-wlo )
	if [ ! "$FILTRAGEISOFF" -eq 1 ];then
		networkisoknext
		dnsmasqwhitelistonly
	fi
	;;
	-cble )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			choiblenabled
			catChoice
			dnsmasqon
		fi
	;;
	-dble )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			initblenabled
			catChoice
			dnsmasqon
		fi
	;;
	-tlo )
		activetimelogin
	;;
	-tlu )
		desactivetimelogin
	;;
	-trf )
		readTimeFILECONF
	;;
	-aupon )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			autoupdateon
		fi
	;;
	-aupoff )
		autoupdateoff
	;;
	-aup )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			autoupdate
		fi
	;;
	-listusers )
		listeusers
	;;
	-gcton )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			activegourpectoff
			iptablesreload
		fi
	;;
	-gctoff )
		desactivegourpectoff
		iptablesreload
	;;
	-gctulist )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			updatelistgctoff
			iptablesreload
		fi
	;;
	-gctapl )
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			networkisoknext
			if [ "$(updatelistgctoff)" -eq 1 ];then
				updatecauser
			fi
			unset test
			applistegctoff
			iptablesreload
		fi
	;;
	-ipton )
		networkisoknext
		$SED "s?.*IPRULES.*?IPRULES=ON?g" $FILE_CONF
		iptablesreload
		echo -e "$RougeD $(eval_gettext 'to add custom rules edit the file 
$FILEIPTABLES 
then run the command CTparental -ipton') 

$(eval_gettext 'to add ipv4/ipv6 blacklist edit the file 
$FILEIPBLACKLIST 
then run the command CTparental -ipton') 
 $Fcolor"
	;;
	-iptoff )
		$SED "s?.*IPRULES=.*?IPRULES=OFF?g" $FILE_CONF
		iptablesreload
		rm -f $RSYSLOGCTPARENTAL
		$RSYSLOGRESTART
	;;
	-cron )
		# appelé toutes les minutes par cron pour activer/désactiver
		# les usagers ayant des restrictions de temps journalier de
		# connexion.
		if [ $( grep -c "HOURSCONNECT=ON" $FILE_CONF ) -eq 1 ];then
			updatetimelogin
		fi
		if [ ! "$FILTRAGEISOFF" -eq 1 ];then
			# appelé toutes les minutes par cron pour modifier la
			# configuration en cas de changement de réseau.
			nomade
			# appelé toutes les minutes par cron pour activer le
			# filtrage sur les usagers nouvellement créés.
			if [ "$(updatelistgctoff)" -eq 1 ];then
			applistegctoff
			iptablesreload
			fi
		fi
		updatecauser
	;;
	-dgreload )
		$E2GUARDIANrestart
	;;
	-grubPon )
	    confgrub2
	;;
	-grubPoff )
		rm -rf /etc/grub.d/99_password
		update-grub2
	;;
	-pfoff )
		privoxydefaultfilteroff
	;;
	-pfon )
		privoxydefaultfilteron
	;;
	-ron )
		cp -f "$DIR_SHARE"/www/CTparental/index.php "$DIRHTML"/index.php
		cp -f "$NEWTEMPLETE2G"/template.html "$DIRE2GLANG"ukenglish/template.html
		cp -f "$NEWTEMPLETE2G"/template-fr.html "$DIRE2GLANG"french/template.html
		chown -R root:"$GROUPHTTPD" "$DIRHTML"
		echo $E2GUARDIANrestart
		$E2GUARDIANrestart
		iptablesreload
	;;
	-roff )
		cp -f "$DIR_SHARE"/www/CTparental/index2.php "$DIRHTML"/index.php
		cp -f "$DIR_SHARE"/www/CTparental/index2.php "$DIRE2GLANG"ukenglish/template.html
		cp -f "$DIR_SHARE"/www/CTparental/index2.php "$DIRE2GLANG"french/template.html
		chown -R root:"$GROUPHTTPD" "$DIRHTML"
		$E2GUARDIANrestart
		iptablesreload
	;;
	-logdnson )
		{
			echo "log-queries"
			echo "log-facility=/var/log/dnsmasq.query.log"
		} > "$DIR_DNS_BLACKLIST_ENABLED"/dnsmasq.query.log.conf
		resolvconffixon
	;;
	-logdnsoff )
		rm -f "$DIR_DNS_BLACKLIST_ENABLED"/dnsmasq.query.log.conf
		resolvconffixon
		rm -f /var/log/dnsmasq.query.log
	;;
	-exp )
		exportconf
	;;
	-imp )
		importconf
	;;
	-cainstall )
	updatecauser
	;;
	-setadmin )
		if [ $# == 3 ]; then
			addadminhttpd $2 $3
		fi
	;;
	*)
	echo "$(gettext "Unknown argument"):$1";
	echo "$usage";
	exit 1
	;;
esac

rm -rf $PIDFILE

exit 0
